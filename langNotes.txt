// package level variables
// var dbConnection psqlConn

// Outside a function, every statement must begin with a keyword
type Feed struct (

)

type Vertex struct {
	X int
	Y int
}

func fetchFeed(uri string) (*feed) {
	response, err := http.Get(uri)
	if err != nil {
		fmt.Println('error fetching feed')
	}

	decoder := xml.NewDecoder(response)

	err := decoder.Decode()
	if err != nil {
		fmt.Println('error decoding feed')
	}

}

// https://godoc.org/github.com/clbanning/mxj#example-HandleXmlReader
func XMLtoJSON(xml *smth) (json interface {}) {
	return json.Marshal(xml)
}

func add(x, y int) int {
	return x + y
}

func subtract(x int, y int) (int, int) {
	primary = x - y
	secondary = y - x

	// empty, or naked, return returns named variables
	return
}

func pow(x, n, lim float64) float64 {
	// if statement runs the first argument, making declarations available in
	// the if block scope and any related else blocks
	if v := math.Pow(x, n); v < lim {
		return v
	}
	return lim
}

func main() {
	// if an initializer (value) is provided, types may be omitted.
	var jelly, pb, raisins = 2, true, false

	fmt.Println(add(42, 13))

	// := indicates implicit typing
	pos, neg := subtract(42, 13)
	fmt.Println(pos, neg)

	const f = "%T(%v)\n"
	fmt.Printf(f, neature, neature)
	fmt.Printf(f, MaxInt, MaxInt)
	fmt.Printf(f, sign, sign)
	fmt.Printf(f, glyph, glyph)

	v := Vertex{1, 2}
	p := &v
	// when accessing a field of a struct you do not need to use a pointer *
	p.X = 1e9 // (*p).X = 1e9
	fmt.Println(v)
}