{
	"feed": {
		"-blogger": "http://schemas.google.com/blogger/2008",
		"-gd": "http://schemas.google.com/g/2005",
		"-georss": "http://www.georss.org/georss",
		"-openSearch": "http://a9.com/-/spec/opensearchrss/1.0/",
		"-thr": "http://purl.org/syndication/thread/1.0",
		"-xmlns": "http://www.w3.org/2005/Atom",
		"author": {
			"email": "noreply@blogger.com",
			"image": {
				"-height": 32,
				"-rel": "http://schemas.google.com/g/2005#thumbnail",
				"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
				"-width": 32
			},
			"name": "Axel Rauschmayer",
			"uri": "https://plus.google.com/110516491705475800224"
		},
		"category": [
			{
				"-term": "dvd"
			},
			{
				"-term": "technique"
			},
			{
				"-term": "movie"
			},
			{
				"-term": "dzone"
			},
			{
				"-term": "jsmyth"
			},
			{
				"-term": "layout"
			},
			{
				"-term": "coffeescript"
			},
			{
				"-term": "jslang"
			},
			{
				"-term": "12quirks"
			},
			{
				"-term": "chromeos"
			},
			{
				"-term": "hosting"
			},
			{
				"-term": "jsfuture"
			},
			{
				"-term": "jsarrays"
			},
			{
				"-term": "audio"
			},
			{
				"-term": "ted"
			},
			{
				"-term": "guice"
			},
			{
				"-term": "tablet"
			},
			{
				"-term": "privacy"
			},
			{
				"-term": "facebook"
			},
			{
				"-term": "society"
			},
			{
				"-term": "education"
			},
			{
				"-term": "asmjs"
			},
			{
				"-term": "house"
			},
			{
				"-term": "fringe"
			},
			{
				"-term": "microsoft"
			},
			{
				"-term": "exploring es6"
			},
			{
				"-term": "library"
			},
			{
				"-term": "obama"
			},
			{
				"-term": "app"
			},
			{
				"-term": "raspberry pi"
			},
			{
				"-term": "es2016"
			},
			{
				"-term": "organizing"
			},
			{
				"-term": "jquery"
			},
			{
				"-term": "proxies"
			},
			{
				"-term": "jsdom"
			},
			{
				"-term": "samsung"
			},
			{
				"-term": "publishing"
			},
			{
				"-term": "msl"
			},
			{
				"-term": "babel"
			},
			{
				"-term": "javafx"
			},
			{
				"-term": "html"
			},
			{
				"-term": "flash"
			},
			{
				"-term": "free"
			},
			{
				"-term": "wwdc"
			},
			{
				"-term": "idea"
			},
			{
				"-term": "software engineering"
			},
			{
				"-term": "gaming"
			},
			{
				"-term": "esnext news"
			},
			{
				"-term": "safari"
			},
			{
				"-term": "health"
			},
			{
				"-term": "cloud"
			},
			{
				"-term": "fritzbox"
			},
			{
				"-term": "mac"
			},
			{
				"-term": "tc39"
			},
			{
				"-term": "star trek"
			},
			{
				"-term": "webassembly"
			},
			{
				"-term": "esnext"
			},
			{
				"-term": "jsshell"
			},
			{
				"-term": "css"
			},
			{
				"-term": "guest"
			},
			{
				"-term": "occupy"
			},
			{
				"-term": "location"
			},
			{
				"-term": "iteration"
			},
			{
				"-term": "law"
			},
			{
				"-term": "feedback"
			},
			{
				"-term": "latex"
			},
			{
				"-term": "howto"
			},
			{
				"-term": "mpaa"
			},
			{
				"-term": "hack"
			},
			{
				"-term": "coding"
			},
			{
				"-term": "rust"
			},
			{
				"-term": "amdefine"
			},
			{
				"-term": "dom"
			},
			{
				"-term": "deutsch"
			},
			{
				"-term": "numbers"
			},
			{
				"-term": "nike"
			},
			{
				"-term": "template literals"
			},
			{
				"-term": "tv"
			},
			{
				"-term": "v8"
			},
			{
				"-term": "concurrency"
			},
			{
				"-term": "emacs"
			},
			{
				"-term": "webos"
			},
			{
				"-term": "motorola"
			},
			{
				"-term": "htc"
			},
			{
				"-term": "unicode"
			},
			{
				"-term": "kindle"
			},
			{
				"-term": "entertainment"
			},
			{
				"-term": "astronomy"
			},
			{
				"-term": "ecommerce"
			},
			{
				"-term": "philosophy"
			},
			{
				"-term": "apple"
			},
			{
				"-term": "browser"
			},
			{
				"-term": "light peak"
			},
			{
				"-term": "markdown"
			},
			{
				"-term": "web"
			},
			{
				"-term": "typedjs"
			},
			{
				"-term": "pixar"
			},
			{
				"-term": "blogging"
			},
			{
				"-term": "puzzle"
			},
			{
				"-term": "business"
			},
			{
				"-term": "travel"
			},
			{
				"-term": "energy"
			},
			{
				"-term": "python"
			},
			{
				"-term": "static generation"
			},
			{
				"-term": "javascript"
			},
			{
				"-term": "web design"
			},
			{
				"-term": "emberjs"
			},
			{
				"-term": "series"
			},
			{
				"-term": "math"
			},
			{
				"-term": "jshistory"
			},
			{
				"-term": "german"
			},
			{
				"-term": "clientjs"
			},
			{
				"-term": "webdev"
			},
			{
				"-term": "canada"
			},
			{
				"-term": "icloud"
			},
			{
				"-term": "eval"
			},
			{
				"-term": "app urls"
			},
			{
				"-term": "tizen"
			},
			{
				"-term": "__proto__"
			},
			{
				"-term": "itunes"
			},
			{
				"-term": "meta-data"
			},
			{
				"-term": "typescript"
			},
			{
				"-term": "security"
			},
			{
				"-term": "lion"
			},
			{
				"-term": "webm"
			},
			{
				"-term": "googleplus"
			},
			{
				"-term": "angularjs"
			},
			{
				"-term": "diaspora"
			},
			{
				"-term": "thunderbolt"
			},
			{
				"-term": "jsstyle"
			},
			{
				"-term": "pdf"
			},
			{
				"-term": "dev"
			},
			{
				"-term": "video"
			},
			{
				"-term": "psychology"
			},
			{
				"-term": "environment"
			},
			{
				"-term": "michael j. fox"
			},
			{
				"-term": "english"
			},
			{
				"-term": "async"
			},
			{
				"-term": "clip"
			},
			{
				"-term": "bluetooth"
			},
			{
				"-term": "music"
			},
			{
				"-term": "es proposal"
			},
			{
				"-term": "blink"
			},
			{
				"-term": "traffic"
			},
			{
				"-term": "googleio"
			},
			{
				"-term": "internet explorer"
			},
			{
				"-term": "jstools"
			},
			{
				"-term": "biology"
			},
			{
				"-term": "ical"
			},
			{
				"-term": "presenting"
			},
			{
				"-term": "chrome"
			},
			{
				"-term": "firefly"
			},
			{
				"-term": "nodejs"
			},
			{
				"-term": "nsa"
			},
			{
				"-term": "jsmodules"
			},
			{
				"-term": "mars"
			},
			{
				"-term": "computers"
			},
			{
				"-term": "webapp"
			},
			{
				"-term": "airbender"
			},
			{
				"-term": "opinion"
			},
			{
				"-term": "aol"
			},
			{
				"-term": "blogger"
			},
			{
				"-term": "vlc"
			},
			{
				"-term": "underscorejs"
			},
			{
				"-term": "webkit"
			},
			{
				"-term": "middle east"
			},
			{
				"-term": "jsint"
			},
			{
				"-term": "google"
			},
			{
				"-term": "futurama"
			},
			{
				"-term": "hci"
			},
			{
				"-term": "gadget"
			},
			{
				"-term": "lightning"
			},
			{
				"-term": "atscript"
			},
			{
				"-term": "semantic web"
			},
			{
				"-term": "iphone"
			},
			{
				"-term": "cross-platform"
			},
			{
				"-term": "git"
			},
			{
				"-term": "pl fundamentals"
			},
			{
				"-term": "media"
			},
			{
				"-term": "nokia"
			},
			{
				"-term": "app store"
			},
			{
				"-term": "info mgmt"
			},
			{
				"-term": "mssurface"
			},
			{
				"-term": "fun"
			},
			{
				"-term": "polymer"
			},
			{
				"-term": "facets"
			},
			{
				"-term": "amazon"
			},
			{
				"-term": "adobe"
			},
			{
				"-term": "programming"
			},
			{
				"-term": "eclipse"
			},
			{
				"-term": "history"
			},
			{
				"-term": "mozilla"
			},
			{
				"-term": "fluentconf"
			},
			{
				"-term": "hyena"
			},
			{
				"-term": "angry birds"
			},
			{
				"-term": "scitech"
			},
			{
				"-term": "servo"
			},
			{
				"-term": "twitter"
			},
			{
				"-term": "gimp"
			},
			{
				"-term": "openoffice"
			},
			{
				"-term": "scifi-fantasy"
			},
			{
				"-term": "talk"
			},
			{
				"-term": "bitwise_ops"
			},
			{
				"-term": "steve jobs"
			},
			{
				"-term": "architecture"
			},
			{
				"-term": "design"
			},
			{
				"-term": "raffle"
			},
			{
				"-term": "winphone"
			},
			{
				"-term": "crowdsourcing"
			},
			{
				"-term": "firefoxos"
			},
			{
				"-term": "life"
			},
			{
				"-term": "nature"
			},
			{
				"-term": "software"
			},
			{
				"-term": "repl"
			},
			{
				"-term": "jsengine"
			},
			{
				"-term": "meego"
			},
			{
				"-term": "h.264"
			},
			{
				"-term": "regexp"
			},
			{
				"-term": "jslib"
			},
			{
				"-term": "gwt"
			},
			{
				"-term": "distributed-social-network"
			},
			{
				"-term": "macbook"
			},
			{
				"-term": "usb"
			},
			{
				"-term": "flattr"
			},
			{
				"-term": "marketing"
			},
			{
				"-term": "2ality"
			},
			{
				"-term": "example"
			},
			{
				"-term": "read"
			},
			{
				"-term": "journalism"
			},
			{
				"-term": "webpack"
			},
			{
				"-term": "thunderbird"
			},
			{
				"-term": "sponsoring"
			},
			{
				"-term": "bookmarklet"
			},
			{
				"-term": "guide"
			},
			{
				"-term": "java"
			},
			{
				"-term": "ipad"
			},
			{
				"-term": "unix"
			},
			{
				"-term": "sponsor"
			},
			{
				"-term": "webcomponents"
			},
			{
				"-term": "promises"
			},
			{
				"-term": "pnacl"
			},
			{
				"-term": "programming languages"
			},
			{
				"-term": "voice control"
			},
			{
				"-term": "humor"
			},
			{
				"-term": "netflix"
			},
			{
				"-term": "firefox"
			},
			{
				"-term": "month"
			},
			{
				"-term": "dsl"
			},
			{
				"-term": "typography"
			},
			{
				"-term": "food"
			},
			{
				"-term": "oracle"
			},
			{
				"-term": "facebook flow"
			},
			{
				"-term": "mobile"
			},
			{
				"-term": "html5"
			},
			{
				"-term": "ios"
			},
			{
				"-term": "shell"
			},
			{
				"-term": "textbook"
			},
			{
				"-term": "leopard"
			},
			{
				"-term": "windows 8"
			},
			{
				"-term": "facetator"
			},
			{
				"-term": "hardware"
			},
			{
				"-term": "advancedjs"
			},
			{
				"-term": "social"
			},
			{
				"-term": "linux"
			},
			{
				"-term": "community"
			},
			{
				"-term": "foreign languages"
			},
			{
				"-term": "photo"
			},
			{
				"-term": "hp"
			},
			{
				"-term": "home entertainment"
			},
			{
				"-term": "rodney"
			},
			{
				"-term": "dart"
			},
			{
				"-term": "book"
			},
			{
				"-term": "comic"
			},
			{
				"-term": "android"
			},
			{
				"-term": "back to the future"
			},
			{
				"-term": "esprop"
			},
			{
				"-term": "npm"
			},
			{
				"-term": "basic income"
			},
			{
				"-term": "prism"
			},
			{
				"-term": "münchen"
			},
			{
				"-term": "theora"
			},
			{
				"-term": "yahoo"
			},
			{
				"-term": "politics"
			},
			{
				"-term": "intel"
			}
		],
		"entry": [
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": {
					"-scheme": "http://www.blogger.com/atom/ns#",
					"-term": "2ality"
				},
				"content": {
					"#text": "\u003cp\u003eFor health reasons, I’m taking June–August off from work (Twitter, blogging, etc.). See you in September!\u003c/p\u003e\n\u003cp\u003eTo tide you over, you can read (and buy, to support my work) my books, which are free to read online:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://speakingjs.com/es5/\"\u003eSpeaking JavaScript\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://exploringjs.com/es6/\"\u003eExploring ES6\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://leanpub.com/setting-up-es6/read\"\u003eSetting up ES6\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://leanpub.com/exploring-es2016-es2017/read\"\u003eExploring ES2016 and ES2017\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-8259471136322353664",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/8259471136322353664/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=8259471136322353664",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/8259471136322353664",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/8259471136322353664",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2016/06/taking-break.html",
						"-rel": "alternate",
						"-title": "Taking a break",
						"-type": "text/html"
					}
				],
				"published": "2016-06-16T14:14:00.001+02:00",
				"title": {
					"#text": "Taking a break",
					"-type": "text"
				},
				"total": 0,
				"updated": "2016-06-16T14:14:38.206+02:00"
			},
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": [
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "esnext"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "dev"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "javascript"
					}
				],
				"content": {
					"#text": "\u003cp\u003eIn this blog post, I show six tricks enabled by new ES6 features. At the end of each section, I point to related material in my book “\u003ca href=\"http://exploringjs.com/es6/\"\u003eExploring ES6\u003c/a\u003e” (which is free to read online).\u003c/p\u003e\n\u003ca name='more'\u003e\u003c/a\u003e\n\u003ch3 id=\"enforcing-mandatory-parameters-via-parameter-default-values\" class=\"countheads\"\u003eEnforcing mandatory parameters via parameter default values\u003c/h3\u003e\u003cp\u003eES6 parameter default values are only evaluated when they are actually used. That lets you enforce that a given parameter be provided:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    /**\n     * Called if a parameter is missing and\n     * the default value is evaluated.\n     */\n    function mandatory() {\n        throw new Error('Missing parameter');\n    }\n    function foo(mustBeProvided = mandatory()) {\n        return mustBeProvided;\n    }\n\u003c/pre\u003e\n\u003cp\u003eThe function call \u003ccode\u003emandatory()\u003c/code\u003e is only made if the parameter \u003ccode\u003emustBeProvided\u003c/code\u003e is missing.\u003c/p\u003e\n\u003cp\u003eInteraction:\u003c/p\u003e\n\u003cpre class=\"repl\"\u003e\n    \u0026gt; foo()\n    Error: Missing parameter\n    \u0026gt; foo(123)\n    123\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eMore information:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSect. “\u003ca href=\"http://exploringjs.com/es6/ch_parameter-handling.html#_required-parameters\"\u003eRequired parameters\u003c/a\u003e” in “Exploring ES6”\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"iterating-over-array-indices-and-elements-via-the-for-of-loop\"\u003eIterating over Array indices and elements via the \u003ccode\u003efor-of\u003c/code\u003e loop\u003c/h3\u003e\u003cp\u003eMethod \u003ccode\u003eforEach()\u003c/code\u003e lets you iterate over the elements of an Array. It also gives you each element’s index, should you want it:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    var arr = ['a', 'b', 'c'];\n    arr.forEach(function (elem, index) {\n        console.log('index = '+index+', elem = '+elem);\n    });\n    // Output:\n    // index = 0, elem = a\n    // index = 1, elem = b\n    // index = 2, elem = c\n\u003c/pre\u003e\n\u003cp\u003eThe ES6 \u003ccode\u003efor-of\u003c/code\u003e loop is a loop that supports ES6 iteration (via iterables and iterators) and destructuring. If you combine destructuring with the new Array method \u003ccode\u003eentries()\u003c/code\u003e, you get:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    const arr = ['a', 'b', 'c'];\n    for (const [index, elem] of arr.entries()) {\n        console.log(`index = ${index}, elem = ${elem}`);\n    }\n\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003earr.entries()\u003c/code\u003e returns an iterable over index-element pairs. The destructuring pattern \u003ccode\u003e[index, elem]\u003c/code\u003e gives us direct access to both components of each pair. The parameter of \u003ccode\u003econsole.log()\u003c/code\u003e is a so-called \u003cem\u003etemplate literal\u003c/em\u003e, which brings string interpolation to JavaScript.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eMore information:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eChap. “\u003ca href=\"http://exploringjs.com/es6/ch_destructuring.html\"\u003eDestructuring\u003c/a\u003e” in “Exploring ES6”\u003c/li\u003e\n\u003cli\u003eChap. “\u003ca href=\"http://exploringjs.com/es6/ch_iteration.html\"\u003eIterables and iterators\u003c/a\u003e” in “Exploring ES6”\u003c/li\u003e\n\u003cli\u003eSect. “\u003ca href=\"http://exploringjs.com/es6/ch_for-of.html#_iterating-with-a-destructuring-pattern\"\u003eIterating with a destructuring pattern\u003c/a\u003e” in “Exploring ES6”\u003c/li\u003e\n\u003cli\u003eChap. “\u003ca href=\"http://exploringjs.com/es6/ch_template-literals.html\"\u003eTemplate literals\u003c/a\u003e” in “Exploring ES6”\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"iterating-over-unicode-code-points\"\u003eIterating over Unicode code points\u003c/h3\u003e\u003cp\u003eSome Unicode \u003cem\u003ecode points\u003c/em\u003e (roughly, characters) comprise two JavaScript characters. For example, emojis:\u003c/p\u003e\n\n\u003cp\u003e\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://2.bp.blogspot.com/-OSNPZIuwA9c/V0F6qIoPoKI/AAAAAAAABNU/94A9dA9wbz4RbV0UhIrr6HziYvz6UDdpgCLcB/s1600/javascript-emoji.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" src=\"https://2.bp.blogspot.com/-OSNPZIuwA9c/V0F6qIoPoKI/AAAAAAAABNU/94A9dA9wbz4RbV0UhIrr6HziYvz6UDdpgCLcB/s1600/javascript-emoji.png\"\u003e\u003c/a\u003e\u003c/div\u003e\n\u003c/p\u003e\n\n\u003cp\u003eStrings implement ES6 iteration. If you iterate over them, you get encoded code points (one or two JavaScript characters). For example:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    for (const ch of 'x\\uD83D\\uDE80y') {\n        console.log(ch.length);\n    }\n    // Output:\n    // 1\n    // 2\n    // 1\n\u003c/pre\u003e\n\u003cp\u003eThat gives you a way to count the number of code points in a string:\u003c/p\u003e\n\u003cpre class=\"repl\"\u003e\n    \u0026gt; [...'x\\uD83D\\uDE80y'].length\n    3\n\u003c/pre\u003e\n\u003cp\u003eThe spread operator (\u003ccode\u003e...\u003c/code\u003e) inserts the items “in” its operand into an Array.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eMore information:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eChap. “\u003ca href=\"http://exploringjs.com/es6/ch_unicode.html\"\u003eUnicode in ES6\u003c/a\u003e” in “Exploring ES6”\u003c/li\u003e\n\u003cli\u003eSect. “\u003ca href=\"http://exploringjs.com/es6/ch_parameter-handling.html#sec_spread-operator\"\u003eThe spread operator (\u003ccode\u003e...\u003c/code\u003e)\u003c/a\u003e” in “Exploring ES6”\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"swapping-variable-values-via-destructuring\"\u003eSwapping variable values via destructuring\u003c/h3\u003e\u003cp\u003eIf you put two variables into an Array and then destructure that Array “into” the same variables, you can swap their values without needing an intermediate variable:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    [a, b] = [b, a];\n\u003c/pre\u003e\n\u003cp\u003eIt is conceivable that JavaScript engines will optimize this pattern in the future so that no Array is created.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eMore information:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eChap. “\u003ca href=\"http://exploringjs.com/es6/ch_destructuring.html\"\u003eDestructuring\u003c/a\u003e” in “Exploring ES6”\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"simple-templating-via-template-literals\"\u003eSimple templating via template literals\u003c/h3\u003e\u003cp\u003eES6 template literals are more like string literals than like traditional text templates. But you can use them for templating if you return them from functions:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    const tmpl = addrs =\u0026gt; `\n        \u0026lt;table\u0026gt;\n        ${addrs.map(addr =\u0026gt; `\n            \u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;${addr.first}\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\n            \u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;${addr.last}\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\n        `).join('')}\n        \u0026lt;/table\u0026gt;\n    `;\n\u003c/pre\u003e\n\u003cp\u003eThe function \u003ccode\u003etmpl\u003c/code\u003e (an \u003ca href=\"http://exploringjs.com/es6/ch_arrow-functions.html\"\u003earrow function\u003c/a\u003e) maps the Array \u003ccode\u003eaddrs\u003c/code\u003e to a string. Let’s use \u003ccode\u003etmpl()\u003c/code\u003e on the Array \u003ccode\u003edata\u003c/code\u003e:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    const data = [\n        { first: '\u0026lt;Jane\u0026gt;', last: 'Bond' },\n        { first: 'Lars', last: '\u0026lt;Croft\u0026gt;' },\n    ];\n    console.log(tmpl(data));\n    // Output:\n    // \u0026lt;table\u0026gt;\n    //\n    //     \u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026lt;Jane\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\n    //     \u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Bond\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\n    //\n    //     \u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Lars\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\n    //     \u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026lt;Croft\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\n    //\n    // \u0026lt;/table\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eMore information:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBlog post “\u003ca href=\"http://www.2ality.com/2016/05/template-literal-whitespace.html\"\u003eHandling whitespace in ES6 template literals\u003c/a\u003e”\u003c/li\u003e\n\u003cli\u003eSect. “\u003ca href=\"http://exploringjs.com/es6/ch_template-literals.html#_text-templating-via-untagged-template-literals\"\u003eText templating via untagged template literals\u003c/a\u003e” in “Exploring ES6”\u003c/li\u003e\n\u003cli\u003eChap. “\u003ca href=\"http://exploringjs.com/es6/ch_arrow-functions.html\"\u003eArrow functions\u003c/a\u003e” in “Exploring ES6”\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"simple-mixins-via-subclass-factories\"\u003eSimple mixins via subclass factories\u003c/h3\u003e\u003cp\u003eIf an ES6 class \u003ccode\u003eextends\u003c/code\u003e another class, that class is specified dynamically, via an arbitrary expression (not statically via an identifier):\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    // Function id() simply returns its parameter\n    const id = x =\u0026gt; x;\n    \n    class Foo extends id(Object) {}\n\u003c/pre\u003e\n\u003cp\u003eThat allows you to implement a mixin as a function that maps a class \u003ccode\u003eC\u003c/code\u003e to a new class (with the mixin methods) whose superclass is \u003ccode\u003eC\u003c/code\u003e. For example, the following two functions \u003ccode\u003eStorage\u003c/code\u003e and \u003ccode\u003eValidation\u003c/code\u003e are mixins:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    const Storage = Sup =\u0026gt; class extends Sup {\n        save(database) { ··· }\n    };\n    const Validation = Sup =\u0026gt; class extends Sup {\n        validate(schema) { ··· }\n    };\n\u003c/pre\u003e\n\u003cp\u003eYou can use them to compose a class \u003ccode\u003eEmployee\u003c/code\u003e as follows.\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    class Person { ··· }\n    class Employee extends Storage(Validation(Person)) { ··· }\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eMore information:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSect. “\u003ca href=\"http://exploringjs.com/es6/ch_classes.html#_simple-mixins\"\u003eSimple mixins\u003c/a\u003e” in “Exploring ES6”\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"further-reading\"\u003eFurther reading\u003c/h3\u003e\u003cp\u003eTwo chapters of “Exploring ES6” give a good overview of ECMAScript 6:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://exploringjs.com/es6/ch_overviews.html\"\u003eAn overview of what’s new in ES6\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://exploringjs.com/es6/ch_first-steps.html\"\u003eFirst steps with ECMAScript 6\u003c/a\u003e [features that are easy to adopt]\u003c/li\u003e\n\u003c/ul\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-5533008164331481809",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/5533008164331481809/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=5533008164331481809",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/5533008164331481809",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/5533008164331481809",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2016/05/six-nifty-es6-tricks.html",
						"-rel": "alternate",
						"-title": "Six nifty ES6 tricks",
						"-type": "text/html"
					}
				],
				"published": "2016-05-22T11:26:00.001+02:00",
				"thumbnail": {
					"-height": 72,
					"-media": "http://search.yahoo.com/mrss/",
					"-url": "https://2.bp.blogspot.com/-OSNPZIuwA9c/V0F6qIoPoKI/AAAAAAAABNU/94A9dA9wbz4RbV0UhIrr6HziYvz6UDdpgCLcB/s72-c/javascript-emoji.png",
					"-width": 72
				},
				"title": {
					"#text": "Six nifty ES6 tricks",
					"-type": "text"
				},
				"total": 0,
				"updated": "2016-05-22T17:13:53.192+02:00"
			},
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": [
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "esnext"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "dev"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "template literals"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "javascript"
					}
				],
				"content": {
					"#text": "\u003cp\u003eIn this blog post, we look at problems that arise when template literals contain whitespace:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBreaking up long lines\u003c/li\u003e\n\u003cli\u003eDedenting content\u003c/li\u003e\n\u003cli\u003eJoining Arrays\u003c/li\u003e\n\u003cli\u003eIndenting inserted content\u003c/li\u003e\n\u003c/ul\u003e\n\u003ca name='more'\u003e\u003c/a\u003e\n\u003cp\u003eI’m using the library \u003ca href=\"https://github.com/declandewet/common-tags\"\u003ecommon-tags\u003c/a\u003e by \u003ca href=\"https://twitter.com/declanjdewet\"\u003eDeclan de Wet\u003c/a\u003e (with “useful template literal tags for dealing with strings in ES6”) to demonstrate solutions for some of these problems.\u003c/p\u003e\n\u003ch3 id=\"breaking-up-long-lines\" class=\"countheads\"\u003eBreaking up long lines\u003c/h3\u003e\u003cp\u003eOccasionally, you have long lines that you want to break up. common-tag’s tag function \u003ccode\u003eoneLine\u003c/code\u003e lets you do that:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    console.log(oneLine`\n    a\n    single\n    line\n    with\n    many\n    words\n    `);\n    // a single line with many words\n\u003c/pre\u003e\n\u003ch3 id=\"dedenting-content\"\u003eDedenting content\u003c/h3\u003e\u003cp\u003eTemplate literals let you embed multi-line text content inside JavaScript. The main challenge is that the text must both have proper indentation and fit nicely into its JavaScript surroundings:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    function foo() {\n        console.log(`\u0026lt;ul\u0026gt;\n        \u0026lt;li\u0026gt;first\u0026lt;/li\u0026gt;\n        \u0026lt;li\u0026gt;second\u0026lt;/li\u0026gt;\n    \u0026lt;/ul\u0026gt;`);    \n    }\n\u003c/pre\u003e\n\u003cp\u003eThis does not look good: The initial \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e is out of place at the end of the line and subsequent lines don’t respect JavaScript’s indentation. The output of \u003ccode\u003efoo()\u003c/code\u003e looks like this:\u003c/p\u003e\n\u003cpre class=\"text\"\u003e\n    \u0026lt;ul\u0026gt;\n        \u0026lt;li\u0026gt;first\u0026lt;/li\u0026gt;\n        \u0026lt;li\u0026gt;second\u0026lt;/li\u0026gt;\n    \u0026lt;/ul\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eAs a work-around one can use \u003ccode\u003etrim()\u003c/code\u003e to gain more freedom w.r.t. the first and the last line:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    function foo() {\n        console.log(`\n    \u0026lt;ul\u0026gt;\n        \u0026lt;li\u0026gt;first\u0026lt;/li\u0026gt;\n        \u0026lt;li\u0026gt;second\u0026lt;/li\u0026gt;\n    \u0026lt;/ul\u0026gt;\n    `.trim());    \n    }\n\u003c/pre\u003e\n\u003cp\u003eThe output is the same and the embedded text looks nicer, but the indentation problem remains.\u003c/p\u003e\n\u003cp\u003eA tag function like common-tag’s \u003ccode\u003estripIndent\u003c/code\u003e can help:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    function foo() {\n        const ul = stripIndent`\n            \u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;first\u0026lt;/li\u0026gt;\n                \u0026lt;li\u0026gt;second\u0026lt;/li\u0026gt;\n            \u0026lt;/ul\u0026gt;\n            `;    \n    }\n\u003c/pre\u003e\n\u003cp\u003eThe idea is to determine which line has the smallest indent and to remove that indent from all lines. Additionally, leading and trailing whitespace is trimmed.\u003c/p\u003e\n\u003ch3 id=\"joining-arrays\"\u003eJoining Arrays\u003c/h3\u003e\u003cp\u003eIf you use template literals for templating, you often write code like this:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    console.log(stripIndent`\n        \u0026lt;ul\u0026gt;\n            ${['foo', 'bar'].map(x =\u0026gt; `\u0026lt;li\u0026gt;${x}\u0026lt;/li\u0026gt;`).join('\\n')}\n        \u0026lt;/ul\u0026gt;\n    `);\n\u003c/pre\u003e\n\u003cp\u003eThe problem is that the output is not properly indented:\u003c/p\u003e\n\u003cpre class=\"text\"\u003e\n    \u0026lt;ul\u0026gt;\n            \u0026lt;li\u0026gt;foo\u0026lt;/li\u0026gt;\n    \u0026lt;li\u0026gt;bar\u0026lt;/li\u0026gt;\n        \u0026lt;/ul\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eThat’s because the line breaks inserted via \u003ccode\u003ejoin()\u003c/code\u003e are not followed by the correct indentation.\u003c/p\u003e\n\u003cp\u003ecommon-tags has the tag function \u003ccode\u003ehtml\u003c/code\u003e which detects Arrays returned from substitutions (\u003ccode\u003e${}\u003c/code\u003e) and inserts them correctly. No need for \u003ccode\u003ejoin()\u003c/code\u003e, anymore:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    console.log(html`\n        \u0026lt;ul\u0026gt;\n            ${['foo', 'bar'].map(x =\u0026gt; `\u0026lt;li\u0026gt;${x}\u0026lt;/li\u0026gt;`)}\n        \u0026lt;/ul\u0026gt;\n    `);\n\u003c/pre\u003e\n\u003cp\u003eNow the output looks like this:\u003c/p\u003e\n\u003cpre class=\"text\"\u003e\n    \u0026lt;ul\u0026gt;\n        \u0026lt;li\u0026gt;foo\u0026lt;/li\u0026gt;\n        \u0026lt;li\u0026gt;bar\u0026lt;/li\u0026gt;\n    \u0026lt;/ul\u0026gt;\n\u003c/pre\u003e\n\u003ch3 id=\"indenting-inserted-content\"\u003eIndenting inserted content\u003c/h3\u003e\u003cp\u003eAlas, common-tags does not indent inserted strings correctly:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    console.log(`\n        \u0026lt;ul\u0026gt;\n            ${'\u0026lt;li\u0026gt;foo\u0026lt;/li\u0026gt;\\n\u0026lt;li\u0026gt;bar\u0026lt;/li\u0026gt;'}\n        \u0026lt;/ul\u0026gt;\n        `);\n\u003c/pre\u003e\n\u003cp\u003eHere, the output is:\u003c/p\u003e\n\u003cpre class=\"text\"\u003e\n    \u0026lt;ul\u0026gt;\n            \u0026lt;li\u0026gt;foo\u0026lt;/li\u0026gt;\n    \u0026lt;li\u0026gt;bar\u0026lt;/li\u0026gt;\n        \u0026lt;/ul\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eThe line break between the \u003ccode\u003e\u0026lt;/li\u0026gt;\u003c/code\u003e and the \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e is not followed by the correct indentation.\u003c/p\u003e\n\u003ch3 id=\"further-reading\"\u003eFurther reading\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003eChap. “\u003ca href=\"http://exploringjs.com/es6/ch_template-literals.html#_a-tag-function-for-html-templating\"\u003eTemplate literals\u003c/a\u003e” in “Exploring ES6”\u003c/li\u003e\n\u003cli\u003eSect. “\u003ca href=\"http://exploringjs.com/es6/ch_template-literals.html#_text-templating-via-untagged-template-literals\"\u003eText templating via untagged template literals\u003c/a\u003e” in “Exploring ES6”\u003c/li\u003e\n\u003c/ul\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-4018654698283258000",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/4018654698283258000/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=4018654698283258000",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/4018654698283258000",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/4018654698283258000",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2016/05/template-literal-whitespace.html",
						"-rel": "alternate",
						"-title": "Handling whitespace in ES6 template literals",
						"-type": "text/html"
					}
				],
				"published": "2016-05-15T16:05:00.001+02:00",
				"title": {
					"#text": "Handling whitespace in ES6 template literals",
					"-type": "text"
				},
				"total": 0,
				"updated": "2016-05-15T16:20:05.860+02:00"
			},
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": [
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "esnext"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "async"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "dev"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "javascript"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "promises"
					}
				],
				"content": {
					"#text": "\u003cp\u003eThis blog post shows how to handle trees of \u003ca href=\"http://exploringjs.com/es6/ch_promises.html\"\u003eES6 Promises\u003c/a\u003e, via an example where the contents of a directory are listed asynchronously.\u003c/p\u003e\n\u003ca name='more'\u003e\u003c/a\u003e\n\u003ch3 id=\"the-challenge\" class=\"countheads\"\u003eThe challenge\u003c/h3\u003e\u003cp\u003eWe’d like to implement a Promise-based asynchronous function \u003ccode\u003elistFile(dir)\u003c/code\u003e whose result is an Array with the paths of the files in the directory \u003ccode\u003edir\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAs an example, consider the following invocation:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    listFiles('/tmp/dir')\n    .then(files =\u0026gt; {\n        console.log(files.join('\\n'));\n    });\n\u003c/pre\u003e\n\u003cp\u003eOne possible output is:\u003c/p\u003e\n\u003cpre class=\"text\"\u003e\n    /tmp/dir/bar.txt\n    /tmp/dir/foo.txt\n    /tmp/dir/subdir/baz.txt\n\u003c/pre\u003e\n\u003ch3 id=\"the-solution\"\u003eThe solution\u003c/h3\u003e\u003cp\u003eFor our solution, we create Promise-based versions of the two Node.js functions \u003ca href=\"https://nodejs.org/api/fs.html#fs_fs_readdir_path_callback\"\u003e\u003ccode\u003efs.readdir()\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://nodejs.org/api/fs.html#fs_fs_stat_path_callback\"\u003e\u003ccode\u003efs.stat()\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    readdirAsync(dirpath) : Promise\u0026lt;Array\u0026lt;string\u0026gt;\u0026gt;\n    statAsync(filepath) : Promise\u0026lt;Stats\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eWe do so via \u003ca href=\"https://github.com/matthew-andrews/denodeify\"\u003ethe library function \u003ccode\u003edenodify\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    import denodeify from 'denodeify';\n    \n    import {readdir,stat} from 'fs';\n    const readdirAsync = denodeify(readdir);\n    const statAsync = denodeify(stat);\n\u003c/pre\u003e\n\u003cp\u003eAdditionally, we need \u003ca href=\"https://nodejs.org/api/path.html#path_path_resolve_from_to\"\u003e\u003ccode\u003epath.resolve(p0, p1, p2, ···)\u003c/code\u003e\u003c/a\u003e which starts with the path \u003ccode\u003ep0\u003c/code\u003e and resolves \u003ccode\u003ep1\u003c/code\u003e relatively to it to produce a new path. Then it continues with resolving \u003ccode\u003ep2\u003c/code\u003e relatively to the new path. Et cetera.\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    import {resolve} from 'path';\n\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003elistFiles()\u003c/code\u003e is implemented as follows:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    function listFiles(filepath) {\n        return statAsync(filepath) // (A)\n        .then(stats =\u0026gt; {\n            if (stats.isDirectory()) { // (B)\n                return readdirAsync(filepath) // (C)\n                // Ensure result is deterministic:\n                .then(childNames =\u0026gt; childNames.sort())\n                .then(sortedNames =\u0026gt;\n                    Promise.all( // (D)\n                        sortedNames.map(childName =\u0026gt; // (E)\n                            listFiles(resolve(filepath, childName)) ) ) )\n                .then(subtrees =\u0026gt; {\n                    // Concatenate the elements of `subtrees`\n                    // into a single Array (explained later)\n                    return flatten(subtrees); // (F)\n                });\n            } else {\n                return [ filepath ];\n            }\n        });    \n    }\n\u003c/pre\u003e\n\u003cp\u003eTwo invocations of Promise-based functions are relatively straightforward:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003estatAsync()\u003c/code\u003e (line A) returns an instance of \u003ccode\u003eStats\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ereaddirAsync()\u003c/code\u003e (line C) returns an Array with filenames.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe interesting part is when \u003ccode\u003elistFiles()\u003c/code\u003e calls itself, recursively, leading to an actual tree of Promises. It does so in several steps:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eFirst, it maps the names of the child files to Promises that fulfill with Arrays of grandchild paths (line E).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIt uses \u003ccode\u003ePromise.all()\u003c/code\u003e to wait until all results are in (line D).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eOnce all results are in, it flattens the Array of Arrays of paths into an Array (line F). That Array fulfills the last Promise of the chain that starts in line C.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNote that synchronous programming constructs are used to compose Promises:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eif\u003c/code\u003e statement in line B decides how to continue the asynchronous computation.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003emap()\u003c/code\u003e method in line E is used to make recursive calls.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"helper-function-flatten%28%29\"\u003eHelper function \u003ccode\u003eflatten()\u003c/code\u003e\u003c/h4\u003e\u003cp\u003eThe tool function \u003ccode\u003eflatten(arr)\u003c/code\u003e concatenates all the elements of \u003ccode\u003earr\u003c/code\u003e into a single Array (one-level flattening). For example:\u003c/p\u003e\n\u003cpre class=\"repl\"\u003e\n    \u0026gt; flatten([[0], [], [1, [2]]])\n    [ 0, 1, [ 2 ] ]\n\u003c/pre\u003e\n\u003cp\u003eIt can be implemented like this:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    function flatten(arr) {\n        return [].concat(...arr);\n    }\n\u003c/pre\u003e\n\u003ch3 id=\"further-reading\"\u003eFurther reading\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003eChapter “\u003ca href=\"http://exploringjs.com/es6/ch_promises.html\"\u003ePromises for asynchronous programming\u003c/a\u003e” in ”Exploring ES6”.\u003c/li\u003e\n\u003c/ul\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-7790124307947792243",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/7790124307947792243/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=7790124307947792243",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/7790124307947792243",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/7790124307947792243",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2016/04/promise-trees.html",
						"-rel": "alternate",
						"-title": "Trees of Promises in ES6",
						"-type": "text/html"
					}
				],
				"published": "2016-04-17T17:55:00.000+02:00",
				"title": {
					"#text": "Trees of Promises in ES6",
					"-type": "text"
				},
				"total": 0,
				"updated": "2016-04-17T18:05:56.538+02:00"
			},
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": [
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "esnext"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "async"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "dev"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "javascript"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "promises"
					}
				],
				"content": {
					"#text": "\u003cp\u003eIn Promise-based asynchronous code, rejections are used for error handling. One risk is that rejections may get lost, leading to silent failures. For example:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    function main() {\n        asyncFunc()\n        .then(···)\n        .then(() =\u0026gt; console.log('Done!'));\n    }\n\u003c/pre\u003e\n\u003cp\u003eIf \u003ccode\u003easyncFunc()\u003c/code\u003e rejects the Promise it returns then that rejection will never be handled anywhere.\u003c/p\u003e\n\u003cp\u003eLet’s look at how you can track unhandled rejections in browsers and in Node.js.\u003c/p\u003e\n\u003ca name='more'\u003e\u003c/a\u003e\n\u003ch3 id=\"unhandled-rejections-in-browsers\" class=\"countheads\"\u003eUnhandled rejections in browsers\u003c/h3\u003e\u003cp\u003eSome browsers (only Chrome at the moment) report unhandled rejections.\u003c/p\u003e\n\u003ch4 id=\"unhandledrejection\"\u003e\u003ccode\u003eunhandledrejection\u003c/code\u003e\u003c/h4\u003e\u003cp\u003eBefore a rejection is reported, an event is dispatched that you can listen to:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    window.addEventListener('unhandledrejection', event =\u0026gt; ···);\n\u003c/pre\u003e\n\u003cp\u003eThe event is an instance of \u003ccode\u003ePromiseRejectionEvent\u003c/code\u003e whose two most important properties are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003epromise\u003c/code\u003e: the Promise that was rejected\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ereason\u003c/code\u003e: the value with which the Promise was rejected\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe following example demonstrates how this event works:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    window.addEventListener('unhandledrejection', event =\u0026gt; {\n        // Prevent error output on the console:\n        event.preventDefault();\n        console.log('Reason: ' + event.reason);\n    });\n    \n    function foo() {\n        Promise.reject('abc');\n    }\n    foo();\n\u003c/pre\u003e\n\u003cp\u003eThe output of this code is:\u003c/p\u003e\n\u003cpre class=\"text\"\u003e\n    Reason: abc\n\u003c/pre\u003e\n\u003ch4 id=\"rejectionhandled\"\u003e\u003ccode\u003erejectionhandled\u003c/code\u003e\u003c/h4\u003e\u003cp\u003eIf a rejection is initially unhandled, but taken care of later then \u003ccode\u003erejectionhandled\u003c/code\u003e is dispatched. You listen to it as follows:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    window.addEventListener('rejectionhandled', event =\u0026gt; ···);\n\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eevent\u003c/code\u003e is also an instance of \u003ccode\u003ePromiseRejectionEvent\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe following code demonstrates \u003ccode\u003erejectionhandled\u003c/code\u003e:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    window.addEventListener('unhandledrejection', event =\u0026gt; {\n        // Prevent error output on the console:\n        event.preventDefault();\n        console.log('Reason: ' + event.reason);\n    });\n    window.addEventListener('rejectionhandled', event =\u0026gt; {\n        console.log('REJECTIONHANDLED');\n    });\n    \n    \n    function foo() {\n        return Promise.reject('abc');\n    }\n    var r = foo();\n    setTimeout(() =\u0026gt; {\n        r.catch(e =\u0026gt; {});\n    }, 0);\n\u003c/pre\u003e\n\u003cp\u003eThis code outputs:\u003c/p\u003e\n\u003cpre class=\"text\"\u003e\n    Reason: abc\n    REJECTIONHANDLED\n\u003c/pre\u003e\n\u003ch4 id=\"further-reading\"\u003eFurther reading\u003c/h4\u003e\u003cp\u003eThe Chrome Platform Status site links to a “\u003ca href=\"https://googlechrome.github.io/samples/promise-rejection-events/\"\u003ePromise Rejection Events Sample\u003c/a\u003e” that contains an explanation and code.\u003c/p\u003e\n\u003ch3 id=\"unhandled-rejections-in-node.js\"\u003eUnhandled rejections in Node.js\u003c/h3\u003e\u003cp\u003eNode.js does not report unhandled rejections, but it emits events for them. You can register an event listener like this:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    process.on('unhandledRejection', (reason, promise) =\u0026gt; ···);\n\u003c/pre\u003e\n\u003cp\u003eThe following code demonstrates how the event works:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    process.on('unhandledRejection', (reason) =\u0026gt; {\n        console.log('Reason: ' + reason);\n    });\n    function foo() {\n        Promise.reject('abc');\n    }\n    foo();\n\u003c/pre\u003e\n\u003ch4 id=\"further-reading_2\"\u003eFurther reading\u003c/h4\u003e\u003cp\u003eThe Node.js documentation has \u003ca href=\"https://nodejs.org/api/process.html#process_event_unhandledrejection\"\u003emore information on the Event \u003ccode\u003eunhandledRejection\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-1917151693059630134",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/1917151693059630134/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=1917151693059630134",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/1917151693059630134",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/1917151693059630134",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2016/04/unhandled-rejections.html",
						"-rel": "alternate",
						"-title": "Tracking unhandled rejected Promises",
						"-type": "text/html"
					}
				],
				"published": "2016-04-12T13:55:00.002+02:00",
				"title": {
					"#text": "Tracking unhandled rejected Promises",
					"-type": "text"
				},
				"total": 0,
				"updated": "2016-04-12T13:56:05.120+02:00"
			},
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": [
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "esnext"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "async"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "dev"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "javascript"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "promises"
					}
				],
				"content": {
					"#text": "\u003cp\u003eThis blog post gives tips for error handling in asynchronous, Promise-based functions.\u003c/p\u003e\n\u003ca name='more'\u003e\u003c/a\u003e\n\u003ch3 id=\"operational-errors-vs.-programmer-errors\" class=\"countheads\"\u003eOperational errors vs. programmer errors\u003c/h3\u003e\u003cp\u003eIn programs, there are two kinds of errors:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cem\u003eOperational errors\u003c/em\u003e happen when a correct program encounters an exceptional situation that requires deviating from the “normal” algorithm. For example, a storage device may run out of memory while the program is writing data to it. This kind of error is expected.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cem\u003eProgrammer errors\u003c/em\u003e happen when code does something wrong. For example, a function may require a parameter to be a string, but receives a number. This kind of error is unexpected.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"operational-errors-dont-mix-rejections-and-exceptions\"\u003eOperational errors: don’t mix rejections and exceptions\u003c/h4\u003e\u003cp\u003eFor operational errors, each function should support exactly one way of signaling errors. For Promise-based functions that means not mixing rejections and exceptions, which is the same as saying that they shouldn’t throw exceptions.\u003c/p\u003e\n\u003ch4 id=\"programmer-errors-fail-quickly\"\u003eProgrammer errors: fail quickly\u003c/h4\u003e\u003cp\u003eFor programmer errors, it usually makes sense to fail as quickly as possible:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    function downloadFile(url) {\n        if (typeof url !== 'string') {\n            throw new Error('Illegal argument: ' + url);\n        }\n        return new Promise(···).\n    }\n\u003c/pre\u003e\n\u003cp\u003eNote that this is not a hard and fast rule. You have to decide whether or not you can handle exceptions in a meaningful way in your asynchronous code.\u003c/p\u003e\n\u003ch3 id=\"handling-exceptions-in-promise-based-functions\"\u003eHandling exceptions in Promise-based functions\u003c/h3\u003e\u003cp\u003eIf exceptions are thrown inside the callbacks of \u003ccode\u003ethen()\u003c/code\u003e and \u003ccode\u003ecatch()\u003c/code\u003e then that’s not a problem, because these two methods convert them to rejections.\u003c/p\u003e\n\u003cp\u003eHowever, things are different if you start your async function by doing something synchronous:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    function asyncFunc() {\n        doSomethingSync(); // (A)\n        return doSomethingAsync()\n        .then(result =\u0026gt; {\n            ···\n        });\n    }\n\u003c/pre\u003e\n\u003cp\u003eIf an exception is thrown in line A then the whole function throws an exception. There are two solutions to this problem.\u003c/p\u003e\n\u003ch4 id=\"solution-1-returning-a-rejected-promise\"\u003eSolution 1: returning a rejected Promise\u003c/h4\u003e\u003cp\u003eYou can catch exceptions and return them as rejected Promises:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    function asyncFunc() {\n        try {\n            doSomethingSync();\n            return doSomethingAsync()\n            .then(result =\u0026gt; {\n                ···\n            });\n        } catch (err) {\n            return Promise.reject(err);\n        }\n    }\n\u003c/pre\u003e\n\u003ch4 id=\"solution-2-executing-the-sync-code-inside-a-callback\"\u003eSolution 2: executing the sync code inside a callback\u003c/h4\u003e\u003cp\u003eYou can also start a chain of \u003ccode\u003ethen()\u003c/code\u003e method calls via \u003ccode\u003ePromise.resolve()\u003c/code\u003e and execute the synchronous code inside a callback:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    function asyncFunc() {\n        return Promise.resolve()\n        .then(() =\u0026gt; {\n            doSomethingSync();\n            return doSomethingAsync();\n        })\n        .then(result =\u0026gt; {\n            ···\n        });\n    }\n\u003c/pre\u003e\n\u003cp\u003eAn alternative is to start the Promise chain via the Promise constructor:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    function asyncFunc() {\n        return new Promise((resolve, reject) =\u0026gt; {\n            doSomethingSync();\n            resolve(doSomethingAsync());\n        })\n        .then(result =\u0026gt; {\n            ···\n        });\n    }\n\u003c/pre\u003e\n\u003cp\u003eThis approach saves you a tick (the synchronous code is executed right away), but it makes your code less regular.\u003c/p\u003e\n\u003ch3 id=\"async-functions-and-exceptions\"\u003eAsync functions and exceptions\u003c/h3\u003e\u003cp\u003e\u003ca href=\"https://twitter.com/bterlson/status/713402741733785600\"\u003eBrian Terlson points out\u003c/a\u003e that \u003ca href=\"http://www.2ality.com/2016/02/async-functions.html\"\u003easync functions\u003c/a\u003e reflect a preference for not mixing exceptions and rejections: Originally, if an async function had a default value that threw an exception then the function would throw an exception. Now, the function rejects the Promise it returns.\u003c/p\u003e\n\u003ch3 id=\"further-reading\"\u003eFurther reading\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e“\u003ca href=\"https://www.joyent.com/developers/node/design/errors\"\u003eError Handling in Node.js\u003c/a\u003e” by Joyent\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.2ality.com/2016/02/async-functions.html\"\u003eES proposal: async functions\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://exploringjs.com/es6/ch_promises.html\"\u003ePromises for asynchronous programming\u003c/a\u003e [chapter in “Exploring ES6”]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eAcknowledgements:\u003c/strong\u003e this post was inspired by \u003ca href=\"https://groups.google.com/forum/#!msg/exploring-es6/PxSk6lmcd6A/B2Aq-onFBwAJ\"\u003ea post by user Mörre Noseshine\u003c/a\u003e in the “Exploring ES6” Google Group. Im also thankful for the feedback to \u003ca href=\"https://twitter.com/rauschma/status/713371400686473216\"\u003ea tweet\u003c/a\u003e asking whether it is OK to throw exceptions from Promise-based functions.\u003c/p\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-8621145454440334173",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/8621145454440334173/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=8621145454440334173",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/8621145454440334173",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/8621145454440334173",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2016/03/promise-rejections-vs-exceptions.html",
						"-rel": "alternate",
						"-title": "Promise-based functions should not throw exceptions",
						"-type": "text/html"
					}
				],
				"published": "2016-03-25T19:52:00.000+01:00",
				"title": {
					"#text": "Promise-based functions should not throw exceptions",
					"-type": "text"
				},
				"total": 0,
				"updated": "2016-03-28T13:43:19.625+02:00"
			},
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": [
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "npm"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "esnext"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "dev"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "javascript"
					}
				],
				"content": {
					"#text": "\u003cp\u003eIn this blog post, I argue that it should be possible to have multiple implementations of the same npm package (same name, same version).\u003c/p\u003e\n\u003ca name='more'\u003e\u003c/a\u003e\n\u003ch3 id=\"the-problem\" class=\"countheads\"\u003eThe problem\u003c/h3\u003e\u003cp\u003eAt the moment, when you write an npm package, you can specify on what platforms it works, via the \u003ccode\u003epackage.json\u003c/code\u003e property \u003ccode\u003eengines\u003c/code\u003e. \u003ca href=\"https://docs.npmjs.com/files/package.json\"\u003eFor example\u003c/a\u003e:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    { \"engines\" : { \"node\" : \"\u0026gt;=0.10.3 \u0026lt;0.12\" } }\n    { \"engines\" : { \"npm\" : \"~1.0.20\" } }\n\u003c/pre\u003e\n\u003cp\u003eThat means that you can only have a single implementation per package. However, there are use cases for multiple implementations of the same package:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor Node.js you can already use many ES6 features. For browsers, you should stay 100% ES5.\u003c/li\u003e\n\u003cli\u003eThere are Node.js-specific polyfills of Browser APIs. For example, \u003ca href=\"https://github.com/bitinn/node-fetch\"\u003e\u003ccode\u003enode-fetch\u003c/code\u003e\u003c/a\u003e polyfills the fetch API.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/rollup/rollup\"\u003eThe module bundler Rollup\u003c/a\u003e needs the ES6 module format to achieve its superior file size savings. But that format doesn’t work anywhere else, yet.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"an-idea-for-a-solution\"\u003eAn idea for a solution\u003c/h3\u003e\u003cp\u003eI see two possible solutions:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAllow the same package (same name, same version) to exist multiple times, targeting different platforms via property \u003ccode\u003eengines\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eAllow packages with multiple versions of the properties \u003ccode\u003emain\u003c/code\u003e and \u003ccode\u003ebin\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe latter solution could lead to \u003ccode\u003epackage.json\u003c/code\u003e files that look like this:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    \"engines\": [\n        {\n            \"node\": \"\u0026gt;=0.10.3 \u0026lt;0.12\",\n            \"main\": \"./es5/index.js\",\n            \"bin\": { \"foo\": \"./es5/bin/foo.js\" }\n        },\n        {\n            \"ecmascript\": \"\u0026gt;=2015\",\n            \"main\": \"./es2015/index.js\",\n            \"bin\": { \"foo\": \"./es2015/bin/foo.js\" }\n        }\n    ],\n\u003c/pre\u003e\n\u003cp\u003eMixing selection criteria (meta-data) and data is not ideal. This is an alternative:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    \"engines\": {\n        \"node \u0026gt;= 0.10.3, node \u0026lt; 0.12\": {\n            \"main\": \"./es5/index.js\",\n            \"bin\": { \"foo\": \"./es5/bin/foo.js\" }\n        },\n        \"ecmascript \u0026gt;= 2015\": {\n            \"main\": \"./es2015/index.js\",\n            \"bin\": { \"foo\": \"./es2015/bin/foo.js\" }\n        }\n    },\n\u003c/pre\u003e\n\u003cp\u003eThe selection criteria should include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBrowsers vs. Node.js\u003c/li\u003e\n\u003cli\u003eSupported ECMAScript version\u003c/li\u003e\n\u003cli\u003eModule format: native (ES6) vs. CommonJS vs. AMD\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"other-solutions\"\u003eOther solutions\u003c/h3\u003e\u003ch4 id=\"ecosystems\"\u003eEcosystems\u003c/h4\u003e\u003cp\u003eI have only seen \u003ca href=\"http://blog.npmjs.org/post/94662089625/the-future-of-the-npm-website-lets-map-this#ecosystems\"\u003ea brief mention of npm ecosystems\u003c/a\u003e, so far. I’m not sure how exactly they would work, but it sounds like they could solve the problem I’ve described here.\u003c/p\u003e\n\u003ch4 id=\"jsnextmain\"\u003e\u003ccode\u003ejsnext:main\u003c/code\u003e\u003c/h4\u003e\u003cp\u003e\u003ccode\u003ejsnext:main\u003c/code\u003e is a custom property that Rollup uses to point to an ES6 module version of the \u003ccode\u003emain\u003c/code\u003e file. The problem with this approach (apart from the less-than-ideal property name) is that it can only handle a single alternate implementation with a fixed format.\u003c/p\u003e\n\u003cp\u003eMore information on \u003ccode\u003ejsnext:main\u003c/code\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/rollup/rollup/wiki/jsnext:main\"\u003ejsnext:main\u003c/a\u003e (Rollup wiki)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/jsforum/jsforum/issues/5\"\u003ejsnext:main – should we use it, and what for?\u003c/a\u003e (jsforum)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"jspm\"\u003ejspm\u003c/h4\u003e\u003cp\u003eThe package manager jspm extends \u003ccode\u003epackage.json\u003c/code\u003e with, among others, the property \u003ccode\u003eformat\u003c/code\u003e whose value can be \u003ccode\u003eesm\u003c/code\u003e (for ECMAScript module), \u003ccode\u003eamd\u003c/code\u003e, \u003ccode\u003ecjs\u003c/code\u003e or \u003ccode\u003eglobal\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAdditionally, you have the option to nest jspm-specific properties via the custom property \u003ccode\u003ejspm\u003c/code\u003e. For example:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    {\n        \"name\": \"my-package\",\n        \"jspm\": {\n            \"main\": \"jspm-main\"\n        }\n    }\n\u003c/pre\u003e\n\u003cp\u003eMore information: “\u003ca href=\"https://github.com/jspm/registry/wiki/Configuring-Packages-for-jspm\"\u003eConfiguring Packages for jspm\u003c/a\u003e”.\u003c/p\u003e\n\u003ch3 id=\"feedback%3F\"\u003eFeedback?\u003c/h3\u003e\u003cp\u003eFeedback welcome! Did I miss anything? Are other (better?) solutions out there?\u003c/p\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-5653712594756394940",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/5653712594756394940/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=5653712594756394940",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/5653712594756394940",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/5653712594756394940",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2016/03/multi-platform-npm-packages.html",
						"-rel": "alternate",
						"-title": "The need for multi-platform npm packages",
						"-type": "text/html"
					}
				],
				"published": "2016-03-20T23:03:00.000+01:00",
				"title": {
					"#text": "The need for multi-platform npm packages",
					"-type": "text"
				},
				"total": 0,
				"updated": "2016-03-20T23:08:22.936+01:00"
			},
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": [
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "esnext"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "dev"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "javascript"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "coding"
					}
				],
				"content": {
					"#text": "\u003cp\u003eES6 arrow functions are often a compelling alternative to \u003ccode\u003eFunction.prototype.bind()\u003c/code\u003e.\u003c/p\u003e\n\u003ca name='more'\u003e\u003c/a\u003e\n\u003ch3 id=\"extracting-methods\" class=\"countheads\"\u003eExtracting methods\u003c/h3\u003e\u003cp\u003eIf an extracted method is to work as a callback, you must specify a fixed \u003ccode\u003ethis\u003c/code\u003e, otherwise it will be invoked as a function (and \u003ccode\u003ethis\u003c/code\u003e will be \u003ccode\u003eundefined\u003c/code\u003e or the global object). For example:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    obj.on('anEvent', console.log.bind(console))\n\u003c/pre\u003e\n\u003cp\u003eAn alternative is to use an arrow function:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    obj.on('anEvent', x =\u0026gt; console.log(x))\n\u003c/pre\u003e\n\u003ch3 id=\"this-via-parameters\"\u003e\u003ccode\u003ethis\u003c/code\u003e via parameters\u003c/h3\u003e\u003cp\u003eThe following code demonstrates a neat trick: For some methods, you don’t need \u003ccode\u003ebind()\u003c/code\u003e for a callback, because they let you specify the value of \u003ccode\u003ethis\u003c/code\u003e, via an additional parameter. \u003ccode\u003efilter()\u003c/code\u003e is one such method:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    const as = new Set([1, 2, 3]);\n    const bs = new Set([3, 2, 4]);\n    const intersection = [...as].filter(bs.has, bs);\n        // [2, 3]\n\u003c/pre\u003e\n\u003cp\u003eHowever, this code is easier to understand if you use an arrow function:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    const as = new Set([1, 2, 3]);\n    const bs = new Set([3, 2, 4]);\n    const intersection = [...as].filter(a =\u0026gt; bs.has(a));\n        // [2, 3]\n\u003c/pre\u003e\n\u003ch3 id=\"partial-evaluation\"\u003ePartial evaluation\u003c/h3\u003e\u003cp\u003e\u003ccode\u003ebind()\u003c/code\u003e enables you to do \u003ca href=\"http://www.2ality.com/2011/09/currying-vs-part-eval.html\"\u003e\u003cem\u003epartial evaluation\u003c/em\u003e\u003c/a\u003e, you can create new functions by filling in parameters of an existing function:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    function add(x, y) {\n        return x + y;\n    }\n    const plus1 = add.bind(undefined, 1);\n\u003c/pre\u003e\n\u003cp\u003eAgain, I find an arrow function easier to understand:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    const plus1 = y =\u0026gt; add(1, y);\n\u003c/pre\u003e\n\u003ch3 id=\"further-reading\"\u003eFurther reading\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.2ality.com/2011/09/currying-vs-part-eval.html\"\u003eCurrying versus partial application (with JavaScript code)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.2ality.com/2011/11/uncurrying-this.html\"\u003eUncurrying \u003ccode\u003ethis\u003c/code\u003e in JavaScript\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-2985389133111783862",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/2985389133111783862/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=2985389133111783862",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/2985389133111783862",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/2985389133111783862",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2016/02/arrow-functions-vs-bind.html",
						"-rel": "alternate",
						"-title": "Arrow functions vs. bind()",
						"-type": "text/html"
					}
				],
				"published": "2016-02-24T12:32:00.002+01:00",
				"title": {
					"#text": "Arrow functions vs. bind()",
					"-type": "text"
				},
				"total": 0,
				"updated": "2016-02-24T12:32:56.952+01:00"
			},
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": [
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "esnext"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "dev"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "javascript"
					}
				],
				"content": {
					"#text": "\u003cp\u003eThe main use case for \u003ca href=\"http://exploringjs.com/es6/ch_symbols.html\"\u003eES6 symbols\u003c/a\u003e is that you can use them as property keys that can’t clash with other property keys.\u003c/p\u003e\n\u003cp\u003eIn case you think that name clashes don’t matter, here are three examples of where name clashes caused problems in the evolution of the JavaScript standard library:\u003c/p\u003e\n\u003ca name='more'\u003e\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eWhen the new method \u003ca href=\"http://exploringjs.com/es6/ch_arrays.html#_iterating-over-arrays\"\u003e\u003ccode\u003eArray.prototype.values()\u003c/code\u003e\u003c/a\u003e was created, it broke existing code where \u003ccode\u003ewith\u003c/code\u003e was used with an Array and shadowed a variable \u003ccode\u003evalues\u003c/code\u003e in an outer scope (\u003ca href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=881782\"\u003ebug report 1\u003c/a\u003e, \u003ca href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=883914\"\u003ebug report 2\u003c/a\u003e). Therefore, a mechanism was introduced to hide properties from \u003ccode\u003ewith\u003c/code\u003e (\u003ca href=\"http://exploringjs.com/es6/ch_oop-besides-classes.html#_property-key-symbolunscopables-object\"\u003e\u003ccode\u003eSymbol.unscopables\u003c/code\u003e\u003c/a\u003e).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eString.prototype.contains\u003c/code\u003e clashed with a method added by MooTools and had to be renamed to \u003ca href=\"http://exploringjs.com/es6/ch_strings.html\"\u003e\u003ccode\u003eString.prototype.includes\u003c/code\u003e\u003c/a\u003e (\u003ca href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=789036\"\u003ebug report\u003c/a\u003e).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe upcoming \u003ccode\u003eArray.prototype.contains\u003c/code\u003e also clashed with a method added by MooTools and had to be renamed to \u003ca href=\"http://www.2ality.com/2016/02/array-prototype-includes.html\"\u003e\u003ccode\u003eArray.prototype.includes\u003c/code\u003e\u003c/a\u003e (\u003ca href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1075059\"\u003ebug report\u003c/a\u003e).\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn contrast, \u003ca href=\"http://exploringjs.com/es6/ch_iteration.html\"\u003eadding iterability to an object via the property key \u003ccode\u003eSymbol.iterator\u003c/code\u003e\u003c/a\u003e can’t cause problems, because that key doesn’t clash with anything.\u003c/p\u003e\n\u003cp\u003eThese examples demonstrate what it means to be a web language: backward compatibility is crucial, which is why compromises are occasionally necessary when evolving the language. As a side benefit, evolving old JavaScript code bases is simpler, too, because new ECMAScript versions never (well, hardly ever) break them.\u003c/p\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-4024296469905460601",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/4024296469905460601/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=4024296469905460601",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/4024296469905460601",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/4024296469905460601",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2016/02/js-name-clashes.html",
						"-rel": "alternate",
						"-title": "Examples of name clashes in JavaScript’s standard library",
						"-type": "text/html"
					}
				],
				"published": "2016-02-22T13:54:00.000+01:00",
				"title": {
					"#text": "Examples of name clashes in JavaScript’s standard library",
					"-type": "text"
				},
				"total": 0,
				"updated": "2016-02-22T16:15:12.039+01:00"
			},
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": {
					"-scheme": "http://www.blogger.com/atom/ns#",
					"-term": "dev"
				},
				"content": {
					"#text": "\u003cp\u003eEnough with the fatigue – tips against feeling overwhelmed:\u003c/p\u003e\n\u003ca name='more'\u003e\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003eDon’t try to know everything – it’s impossible in modern web development. Given that there is always more to know, it doesn’t matter that much what you learn (unless you have a specific need).\u003cul\u003e\n\u003cli\u003eGo for depth in areas you love.\u003c/li\u003e\n\u003cli\u003eGo for breadth and on-demand learning in areas you are merely interested in or think you should know more about.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eWait for the critical mass. You can often afford to get started by reading the opinions of people you trust and wait it out until new ideas prove themselves.\u003c/li\u003e\n\u003cli\u003eStick to things you understand: don’t use more than 1–2 new technologies per project.\u003cul\u003e\n\u003cli\u003eIt’s important to retain at least some feeling of control.\u003c/li\u003e\n\u003cli\u003eEvery technology that people need to learn before they can use your project raises the barrier of entry and makes it more difficult to find collaborators, colleagues and employees.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eDo exploratory toy projects: I like creating small projects that explore technologies or aspects of technologies.\u003c/li\u003e\n\u003cli\u003eDiversify in life: Specializing is good, but it’s also good to have regular activities not related to tech and/or brain. The advantage is that if you are frustrated in one area of your life, you have others to fall back on.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEven with the last of the previous tips, I find it important to remain human. Don’t overdo discipline, don’t become a life improvement machine. Periods of boredom and doing nothing are important for recuperating and inspiration.\u003c/p\u003e\n\u003cp\u003eWhen in doubt about what to learn next, you can always go back to fundamentals:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eJavaScript, CSS, etc. (which technologies are fundamental depends on your work)\u003c/li\u003e\n\u003cli\u003eNon-technological skills: time management, social skills (communication, team building, …), health (posture, breathing properly, moving well, eating well, …), management processes and so on.\u003c/li\u003e\n\u003c/ul\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-3758803525795198987",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/3758803525795198987/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=3758803525795198987",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/3758803525795198987",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/3758803525795198987",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2016/02/js-fatigue-fatigue.html",
						"-rel": "alternate",
						"-title": "JavaScript fatigue fatigue",
						"-type": "text/html"
					}
				],
				"published": "2016-02-11T13:28:00.002+01:00",
				"title": {
					"#text": "JavaScript fatigue fatigue",
					"-type": "text"
				},
				"total": 0,
				"updated": "2016-02-11T14:15:02.253+01:00"
			},
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": [
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "es proposal"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "esnext"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "dev"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "javascript"
					}
				],
				"content": {
					"#text": "\u003cp\u003e\u003ccode\u003eObject.getOwnPropertyDescriptors()\u003c/code\u003e is an ECMAScript proposal by Jordan Harband and Andrea Giammarchi. It recently advanced to \u003ca href=\"http://www.2ality.com/2015/11/tc39-process.html\"\u003estage 3\u003c/a\u003e.\u003c/p\u003e\n\u003ca name='more'\u003e\u003c/a\u003e\n\u003ch3 id=\"overview\" class=\"countheads\"\u003eOverview\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eObject.getOwnPropertyDescriptors(obj)\u003c/code\u003e accepts an object \u003ccode\u003eobj\u003c/code\u003e and returns an object \u003ccode\u003eresult\u003c/code\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor each own (non-inherited) property of \u003ccode\u003eobj\u003c/code\u003e, it adds a property to \u003ccode\u003eresult\u003c/code\u003e whose key is the same and whose value is the the former property’s \u003cem\u003edescriptor\u003c/em\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eProperty descriptors describe the \u003cem\u003eattributes\u003c/em\u003e of a property (its value, whether it is writable, etc.). For more information, consult Sect. “\u003ca href=\"http://speakingjs.com/es5/ch17.html#property_attributes\"\u003eProperty Attributes and Property Descriptors\u003c/a\u003e” in “Speaking JavaScript”.\u003c/p\u003e\n\u003cp\u003eThis is an example of using \u003ccode\u003eObject.getOwnPropertyDescriptors()\u003c/code\u003e:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    const obj = {\n        [Symbol('foo')]: 123,\n        get bar() { return 'abc' },\n    };\n    console.log(Object.getOwnPropertyDescriptors(obj));\n    \n    // Output:\n    // { [Symbol('foo')]:\n    //    { value: 123,\n    //      writable: true,\n    //      enumerable: true,\n    //      configurable: true },\n    //   bar:\n    //    { get: [Function: bar],\n    //      set: undefined,\n    //      enumerable: true,\n    //      configurable: true } }\n\u003c/pre\u003e\n\u003cp\u003eThis is how you would implement \u003ccode\u003eObject.getOwnPropertyDescriptors()\u003c/code\u003e:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    function getOwnPropertyDescriptors(obj) {\n        const result = {};\n        for (let key of Reflect.ownKeys(obj)) {\n            result[key] = Object.getOwnPropertyDescriptor(obj, key);\n        }\n        return result;\n    }\n\u003c/pre\u003e\n\u003ch3 id=\"use-cases-for-object.getownpropertydescriptors%28%29\"\u003eUse cases for \u003ccode\u003eObject.getOwnPropertyDescriptors()\u003c/code\u003e\u003c/h3\u003e\u003ch4 id=\"use-case-copying-properties-into-an-object\"\u003eUse case: copying properties into an object\u003c/h4\u003e\u003cp\u003eSince ES6, JavaScript already has a tool method for copying properties: \u003ccode\u003eObject.assign()\u003c/code\u003e. However, this method uses simple get and set operations to copy a property whose key is \u003ccode\u003ekey\u003c/code\u003e:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    const value = source[key]; // get\n    target[key] = value; // set\n\u003c/pre\u003e\n\u003cp\u003eThat means that it doesn’t properly copy properties with non-default attributes (getters, setters, non-writable properties, etc.). The following example illustrates this limitation. The object \u003ccode\u003esource\u003c/code\u003e has a getter whose key is \u003ccode\u003efoo\u003c/code\u003e:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    const source = {\n        set foo(value) {\n            console.log(value);\n        }\n    };\n    console.log(Object.getOwnPropertyDescriptor(source, 'foo'));\n    // { get: undefined,\n    //   set: [Function: foo],\n    //   enumerable: true,\n    //   configurable: true }\n\u003c/pre\u003e\n\u003cp\u003eUsing \u003ccode\u003eObject.assign()\u003c/code\u003e to copy property \u003ccode\u003efoo\u003c/code\u003e to object \u003ccode\u003etarget\u003c/code\u003e fails:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    const target1 = {};\n    Object.assign(target1, source);\n    console.log(Object.getOwnPropertyDescriptor(target1, 'foo'));\n    // { value: undefined,\n    //   writable: true,\n    //   enumerable: true,\n    //   configurable: true }\n\u003c/pre\u003e\n\u003cp\u003eFortunately, using \u003ccode\u003eObject.getOwnPropertyDescriptors()\u003c/code\u003e together with \u003ca href=\"http://speakingjs.com/es5/ch17.html#Object.defineProperties\"\u003e\u003ccode\u003eObject.defineProperties()\u003c/code\u003e\u003c/a\u003e works:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    const target2 = {};\n    Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));\n    console.log(Object.getOwnPropertyDescriptor(target2, 'foo'));\n    // { get: undefined,\n    //   set: [Function: foo],\n    //   enumerable: true,\n    //   configurable: true }\n\u003c/pre\u003e\n\u003ch4 id=\"use-case-cloning-objects\"\u003eUse case: cloning objects\u003c/h4\u003e\u003cp\u003eShallow cloning is similar to copying properties, which is why \u003ccode\u003eObject.getOwnPropertyDescriptors()\u003c/code\u003e is a good choice here, too.\u003c/p\u003e\n\u003cp\u003eThis time, we use \u003ca href=\"http://speakingjs.com/es5/ch17.html#Object.create\"\u003e\u003ccode\u003eObject.create()\u003c/code\u003e\u003c/a\u003e that has two parameters:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe first parameter specifies the prototype of the object it returns.\u003c/li\u003e\n\u003cli\u003eThe optional second parameter is a property descriptor collection like the ones returned by \u003ccode\u003eObject.getOwnPropertyDescriptors()\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre class=\"javascript\"\u003e\n    const clone = Object.create(Object.getPrototypeOf(obj),\n        Object.getOwnPropertyDescriptors(obj));\n\u003c/pre\u003e\n\u003ch4 id=\"use-case-cross-platform-object-literals-with-arbitrary-prototypes\"\u003eUse case: cross-platform object literals with arbitrary prototypes\u003c/h4\u003e\u003cp\u003eThe syntactically nicest way of using an object literal to create an object with an arbitrary prototype \u003ccode\u003eprot\u003c/code\u003e is to use the special property \u003ccode\u003e__proto__\u003c/code\u003e:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    const obj = {\n        __proto__: prot,\n        foo: 123,\n    };\n\u003c/pre\u003e\n\u003cp\u003eAlas, that feature is only guaranteed to be there in browsers. The common work-around is \u003ccode\u003eObject.create()\u003c/code\u003e and assignment:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    const obj = Object.create(prot);\n    obj.foo = 123;\n\u003c/pre\u003e\n\u003cp\u003eBut you can also use \u003ccode\u003eObject.getOwnPropertyDescriptors()\u003c/code\u003e:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    const obj = Object.create(\n        prot,\n        Object.getOwnPropertyDescriptors({\n            foo: 123,\n        })\n    );\n\u003c/pre\u003e\n\u003cp\u003eAnother alternative is \u003ccode\u003eObject.assign()\u003c/code\u003e:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    const obj = Object.assign(\n        Object.create(prot),\n        {\n            foo: 123,\n        }\n    );\n\u003c/pre\u003e\n\u003ch3 id=\"pitfall-copying-methods-that-use-super\"\u003ePitfall: copying methods that use \u003ccode\u003esuper\u003c/code\u003e\u003c/h3\u003e\u003cp\u003eA method that uses \u003ccode\u003esuper\u003c/code\u003e is firmly connected with its \u003cem\u003ehome object\u003c/em\u003e (the object it is stored in). There is currently no way to copy or move such a method to a different object.\u003c/p\u003e\n\u003ch3 id=\"further-reading\"\u003eFurther reading\u003c/h3\u003e\u003cp\u003eJavaScript design process:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.2ality.com/2015/11/tc39-process.html\"\u003eAn explanation of the TC39 process and its stages.\u003c/a\u003e This process governs the design and evolution of JavaScript.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.2ality.com/2016/02/ecmascript-2017.html\"\u003eList of proposals that are currently at stage 3 or 4.\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003eObject.getOwnPropertyDescriptors()\u003c/code\u003e and property descriptors:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/tc39/proposal-object-getownpropertydescriptors\"\u003eECMAScript proposal “\u003ccode\u003eObject.getOwnPropertyDescriptors\u003c/code\u003e”\u003c/a\u003e by Jordan Harband and Andrea Giammarchi\u003c/li\u003e\n\u003cli\u003eSect. “\u003ca href=\"http://speakingjs.com/es5/ch17.html#property_attributes\"\u003eProperty Attributes and Property Descriptors\u003c/a\u003e” in “Speaking JavaScript”.\u003c/li\u003e\n\u003c/ul\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-5775925786240778936",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/5775925786240778936/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=5775925786240778936",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/5775925786240778936",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/5775925786240778936",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2016/02/object-getownpropertydescriptors.html",
						"-rel": "alternate",
						"-title": "ES proposal: Object.getOwnPropertyDescriptors()",
						"-type": "text/html"
					}
				],
				"published": "2016-02-04T09:44:00.002+01:00",
				"title": {
					"#text": "ES proposal: Object.getOwnPropertyDescriptors()",
					"-type": "text"
				},
				"total": 0,
				"updated": "2016-02-04T09:44:27.190+01:00"
			},
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": [
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "es proposal"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "esnext"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "dev"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "javascript"
					}
				],
				"content": {
					"#text": "\u003cp\u003e\u003ca href=\"http://www.2ality.com/2016/01/ecmascript-2016.html\"\u003eThe feature set of ES2016 was recently finalized\u003c/a\u003e. This blog post tracks what features may be included in ES2017. I will continually update it.\u003c/p\u003e\n\u003ca name='more'\u003e\u003c/a\u003e\n\n\u003ch3 id=\"proposed-ecmascript-features\" class=\"countheads\"\u003eProposed ECMAScript features\u003c/h3\u003e\u003cp\u003e\u003ca href=\"http://www.2ality.com/2015/11/tc39-process.html\"\u003eRecall that every ECMAScript feature proposal goes through stages\u003c/a\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eStage 4 means that a feature will probably be in the next release.\u003c/li\u003e\n\u003cli\u003eStage 3 means that a feature still has a chance of being included in the next release.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe following features are currently at stage 4:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.2ality.com/2015/11/stage3-object-entries.html\"\u003eObject.values/Object.entries (Jordan Harband)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe following features are currently at stage 3:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#simd-js\"\u003eSIMD.JS – SIMD APIs + polyfill (John McCutchan, Peter Jensen, Dan Gohman, Daniel Ehrenberg)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.2ality.com/2016/02/async-functions.html\"\u003eAsync Functions (Brian Terlson)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.2ality.com/2015/11/string-padding.html\"\u003eString padding (Jordan Harband, Rick Waldron)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.2ality.com/2015/11/trailing-comma-parameters.html\"\u003eTrailing commas in function parameter lists and calls (Jeff Morrison)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.2ality.com/2016/02/object-getownpropertydescriptors.html\"\u003e\u003ccode\u003eObject.getOwnPropertyDescriptors()\u003c/code\u003e (Jordan Harband, Andrea Giammarchi)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf you are wondering what stages other proposed features are in, consult \u003ca href=\"https://github.com/tc39/ecma262/blob/master/README.md\"\u003ethe readme of the ECMA-262 GitHub repository\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"simd-js\"\u003eSIMD.JS – SIMD APIs + polyfill (John McCutchan, Peter Jensen, Dan Gohman, Daniel Ehrenberg)\u003c/h3\u003e\u003cp\u003eSIMD stands for “single instruction, multiple data”, the ability of a CPU to apply an operand to vectors of values (instead of single values). One popular example of a SIMD instruction set is \u003ca href=\"https://en.wikipedia.org/wiki/Streaming_SIMD_Extensions\"\u003eSSE (Streaming SIMD Extensions)\u003c/a\u003e, as supported by Intel processors.\u003c/p\u003e\n\u003cp\u003eThis is a short code example, consult the sources below for more information.\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    var a = SIMD.float32x4(1.0, 2.0, 3.0, 4.0);\n    var b = SIMD.float32x4(5.0, 6.0, 7.0, 8.0);\n    var c = SIMD.float32x4.add(a,b);\n\u003c/pre\u003e\n\u003cp\u003eFurther reading:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://tc39.github.io/ecmascript_simd/\"\u003eSIMD.JS – SIMD APIs + polyfill\u003c/a\u003e (John McCutchan, Peter Jensen, Dan Gohman, Daniel Ehrenberg)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.2ality.com/2013/12/simd-js.html\"\u003eJavaScript gains support for SIMD\u003c/a\u003e (2ality)\u003c/li\u003e\n\u003c/ul\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-1084254206985427708",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/1084254206985427708/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=1084254206985427708",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/1084254206985427708",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/1084254206985427708",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2016/02/ecmascript-2017.html",
						"-rel": "alternate",
						"-title": "Feature watch: ECMAScript 2017",
						"-type": "text/html"
					}
				],
				"published": "2016-02-02T09:36:00.000+01:00",
				"title": {
					"#text": "Feature watch: ECMAScript 2017",
					"-type": "text"
				},
				"total": 0,
				"updated": "2016-03-29T21:44:06.339+02:00"
			},
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": [
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "es proposal"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "esnext"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "async"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "dev"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "javascript"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "promises"
					}
				],
				"content": {
					"#text": "\u003cp\u003eAsync functions are an ECMAScript proposal by Brian Terlson. It is at stage 3 (candidate).\u003c/p\u003e\n\u003cp\u003eBefore I can explain async functions, I need to explain how Promises and generators can be combined to perform asynchronous operations via synchronous-looking code.\u003c/p\u003e\n\u003ca name='more'\u003e\u003c/a\u003e\n\u003ch3 id=\"writing-async-code-via-promises-and-generators\" class=\"countheads\"\u003eWriting async code via Promises and generators\u003c/h3\u003e\u003cp\u003eFor functions that compute their one-off results asynchronously, Promises, which are part of ES6, are becoming increasingly popular. One example is \u003ca href=\"https://fetch.spec.whatwg.org/#concept-request\"\u003ethe client-side \u003ccode\u003efetch\u003c/code\u003e API\u003c/a\u003e, which is an alternative to XMLHttpRequest for retrieving files. Using it looks as follows:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    function fetchJson(url) {\n        return fetch(url)\n        .then(request =\u0026gt; request.text())\n        .then(text =\u0026gt; {\n            return JSON.parse(text);\n        })\n        .catch(error =\u0026gt; {\n            console.log(`ERROR: ${error.stack}`);\n        });\n    }\n    fetchJson('http://example.com/some_file.json')\n    .then(obj =\u0026gt; console.log(obj));\n\u003c/pre\u003e\n\u003cp\u003eco is a library that uses Promises and generators to enable a coding style that looks more synchronous, but works the same as the style used in the previous example:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    const fetchJson = co.wrap(function* (url) {\n        try {\n            let request = yield fetch(url);\n            let text = yield request.text();\n            return JSON.parse(text);\n        }\n        catch (error) {\n            console.log(`ERROR: ${error.stack}`);\n        }\n    });\n\u003c/pre\u003e\n\u003cp\u003eEvery time the callback (a generator function!) yields a Promise to co, the callback gets suspended. Once the Promise is settled, co resumes the callback: if the Promise was fulfilled, \u003ccode\u003eyield\u003c/code\u003e returns the fulfillment value, if it was rejected, \u003ccode\u003eyield\u003c/code\u003e throws the rejection error. Additionally, co promisifies the result returned by the callback (similarly to how \u003ccode\u003ethen()\u003c/code\u003e does it).\u003c/p\u003e\n\u003ch3 id=\"async-functions\"\u003eAsync functions\u003c/h3\u003e\u003cp\u003eAsync functions are basically dedicated syntax for what co does:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    async function fetchJson(url) {\n        try {\n            let request = await fetch(url);\n            let text = await request.text();\n            return JSON.parse(text);\n        }\n        catch (error) {\n            console.log(`ERROR: ${error.stack}`);\n        }\n    }\n\u003c/pre\u003e\n\u003cp\u003eInternally, async functions work much like generators, but they are not translated to generator functions.\u003c/p\u003e\n\u003ch3 id=\"variants\"\u003eVariants\u003c/h3\u003e\u003cp\u003eThe following variants of async functions exist:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAsync function declarations: \u003ccode\u003easync function foo() {}\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eAsync function expressions: \u003ccode\u003econst foo = async function () {};\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eAsync method definitions: \u003ccode\u003elet obj = { async foo() {} }\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eAsync arrow functions: \u003ccode\u003econst foo = async () =\u0026gt; {};\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"further-reading\"\u003eFurther reading\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/tc39/ecmascript-asyncawait\"\u003eAsync Functions\u003c/a\u003e (Brian Terlson)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://exploringjs.com/es6/ch_generators.html#sec_co-library\"\u003eSimplifying asynchronous computations via generators\u003c/a\u003e (section in “Exploring ES6”)\u003c/li\u003e\n\u003c/ul\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-2877640886914038897",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/2877640886914038897/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=2877640886914038897",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/2877640886914038897",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/2877640886914038897",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2016/02/async-functions.html",
						"-rel": "alternate",
						"-title": "ES proposal: async functions",
						"-type": "text/html"
					}
				],
				"published": "2016-02-01T11:38:00.002+01:00",
				"title": {
					"#text": "ES proposal: async functions",
					"-type": "text"
				},
				"total": 0,
				"updated": "2016-04-30T12:04:23.489+02:00"
			},
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": [
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "esnext"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "dev"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "es2016"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "javascript"
					}
				],
				"content": {
					"#text": "\u003cp\u003eThe exponentiation operator (\u003ccode\u003e**\u003c/code\u003e) is an ECMAScript proposal by Rick Waldron. It is at stage 4 (finished) and part of \u003ca href=\"http://www.2ality.com/2016/01/ecmascript-2016.html\"\u003eECMAScript 2016\u003c/a\u003e.\u003c/p\u003e\n\u003ca name='more'\u003e\u003c/a\u003e\n\u003ch3 id=\"an-infix-operator-for-exponentiation\" class=\"countheads\"\u003eAn infix operator for exponentiation\u003c/h3\u003e\u003cp\u003e\u003ccode\u003e**\u003c/code\u003e is an infix operator for exponentiation:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    x ** y\n\u003c/pre\u003e\n\u003cp\u003eis produces the same result as\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    Math.pow(x, y)\n\u003c/pre\u003e\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    let squared = 3 ** 2; // 9\n    \n    let num = 3;\n    num **= 2;\n    console.log(num); // 9\n\u003c/pre\u003e\n\u003cp\u003eFurther reading:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/rwaldron/exponentiation-operator\"\u003eExponentiation Operator\u003c/a\u003e (Rick Waldron)\u003c/li\u003e\n\u003c/ul\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-6940299136630329414",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/6940299136630329414/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=6940299136630329414",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/6940299136630329414",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/6940299136630329414",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2016/02/exponentiation-operator.html",
						"-rel": "alternate",
						"-title": "ES2016 feature: exponentiation operator (**)",
						"-type": "text/html"
					}
				],
				"published": "2016-02-01T11:32:00.002+01:00",
				"title": {
					"#text": "ES2016 feature: exponentiation operator (**)",
					"-type": "text"
				},
				"total": 0,
				"updated": "2016-02-01T11:32:53.065+01:00"
			},
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": [
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "esnext"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "dev"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "es2016"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "javascript"
					}
				],
				"content": {
					"#text": "\u003cp\u003e\u003ccode\u003eArray.prototype.includes\u003c/code\u003e is an ECMAScript proposal by Domenic Denicola and Rick Waldron. It is at stage 4 (finished) and part of \u003ca href=\"http://www.2ality.com/2016/01/ecmascript-2016.html\"\u003eECMAScript 2016\u003c/a\u003e.\u003c/p\u003e\n\u003ca name='more'\u003e\u003c/a\u003e\n\u003ch3 id=\"the-array-method-includes\" class=\"countheads\"\u003eThe Array method \u003ccode\u003eincludes\u003c/code\u003e\u003c/h3\u003e\u003cp\u003eThe Array method \u003ccode\u003eincludes\u003c/code\u003e has the following signature:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    Array.prototype.includes(value : any) : boolean\n\u003c/pre\u003e\n\u003cp\u003eIt returns \u003ccode\u003etrue\u003c/code\u003e if \u003ccode\u003evalue\u003c/code\u003e is an element of its receiver (\u003ccode\u003ethis\u003c/code\u003e) and \u003ccode\u003efalse\u003c/code\u003e, otherwise:\u003c/p\u003e\n\u003cpre class=\"repl\"\u003e\n    \u0026gt; ['a', 'b', 'c'].includes('a')\n    true\n    \u0026gt; ['a', 'b', 'c'].includes('d')\n    false\n\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eincludes\u003c/code\u003e is similar to \u003ccode\u003eindexOf\u003c/code\u003e – the following two expressions are mostly equivalent:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    arr.includes(x)\n    arr.indexOf(x) \u0026gt;= 0\n\u003c/pre\u003e\n\u003cp\u003eThe main difference is that \u003ccode\u003eincludes()\u003c/code\u003e finds \u003ccode\u003eNaN\u003c/code\u003e, whereas \u003ccode\u003eindexOf()\u003c/code\u003e doesn’t:\u003c/p\u003e\n\u003cpre class=\"repl\"\u003e\n    \u0026gt; [NaN].includes(NaN)\n    true\n    \u0026gt; [NaN].indexOf(NaN)\n    -1\n\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eincludes\u003c/code\u003e does not distinguish between \u003ccode\u003e+0\u003c/code\u003e and \u003ccode\u003e-0\u003c/code\u003e (\u003ca href=\"http://speakingjs.com/es5/ch11.html#two_zeros\"\u003ewhich is how almost all of JavaScript works\u003c/a\u003e):\u003c/p\u003e\n\u003cpre class=\"repl\"\u003e\n    \u0026gt; [-0].includes(+0)\n    true\n\u003c/pre\u003e\n\u003cp\u003eTyped Arrays will also have a method \u003ccode\u003eincludes()\u003c/code\u003e:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    let tarr = Uint8Array.of(12, 5, 3);\n    console.log(tarr.includes(5)); // true\n\u003c/pre\u003e\n\u003ch3 id=\"frequently-asked-questions\"\u003eFrequently asked questions\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eWhy is the method called \u003ccode\u003eincludes\u003c/code\u003e and not \u003ccode\u003econtains\u003c/code\u003e?\u003c/strong\u003e\u003cbr\u003eThe latter was the initial choice, but that broke code on the web (\u003ca href=\"https://esdiscuss.org/topic/having-a-non-enumerable-array-prototype-contains-may-not-be-web-compatible\"\u003eMooTools adds this method to \u003ccode\u003eArray.prototype\u003c/code\u003e\u003c/a\u003e).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eWhy is the method called \u003ccode\u003eincludes\u003c/code\u003e and not \u003ccode\u003ehas\u003c/code\u003e?\u003c/strong\u003e\u003cbr\u003e\u003ccode\u003ehas\u003c/code\u003e is used for keys (\u003ccode\u003eMap.prototype.has\u003c/code\u003e), \u003ccode\u003eincludes\u003c/code\u003e is used for elements (\u003ccode\u003eString.prototype.includes\u003c/code\u003e). The elements of a Set can be viewed as being both keys and values, which is why there is a \u003ccode\u003eSet.prototype.has\u003c/code\u003e (and no \u003ccode\u003eincludes\u003c/code\u003e).\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"http://exploringjs.com/es6/ch_strings.html#_checking-for-containment-and-repeating-strings\"\u003eThe ES6 method \u003ccode\u003eString.prototype.includes\u003c/code\u003e\u003c/a\u003e works with strings, not characters. Isn’t that inconsistent w.r.t. \u003ccode\u003eArray.prototype.includes\u003c/code\u003e?\u003c/strong\u003e\u003cbr\u003eIf Array \u003ccode\u003eincludes\u003c/code\u003e worked exactly like string \u003ccode\u003eincludes\u003c/code\u003e, it would accept arrays, not single elements. But the two \u003ccode\u003eincludes\u003c/code\u003e follow the example of \u003ccode\u003eindexOf\u003c/code\u003e; characters are seen as a special case and strings with arbitrary lengths as the general case.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"further-reading\"\u003eFurther reading\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/tc39/Array.prototype.includes/\"\u003e\u003ccode\u003eArray.prototype.includes\u003c/code\u003e\u003c/a\u003e (Domenic Denicola, Rick Waldron)\u003c/li\u003e\n\u003c/ul\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-594797046547610335",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/594797046547610335/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=594797046547610335",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/594797046547610335",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/594797046547610335",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2016/02/array-prototype-includes.html",
						"-rel": "alternate",
						"-title": "ES2016 feature: Array.prototype.includes",
						"-type": "text/html"
					}
				],
				"published": "2016-02-01T11:29:00.000+01:00",
				"title": {
					"#text": "ES2016 feature: Array.prototype.includes",
					"-type": "text"
				},
				"total": 0,
				"updated": "2016-02-01T11:29:25.916+01:00"
			},
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": [
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "esnext"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "dev"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "es2016"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "javascript"
					}
				],
				"content": {
					"#text": "\u003cp\u003eWe always knew that ECMAScript 2016 (ES2016) would be a small release. It turns out that it will be \u003cem\u003every\u003c/em\u003e small. Read on for a list of its features and an explanation why that is not a problem.\u003c/p\u003e\n\u003ca name='more'\u003e\u003c/a\u003e\n\u003ch3 id=\"the-features-of-es2016\" class=\"countheads\"\u003eThe features of ES2016\u003c/h3\u003e\u003cp\u003eAny proposals that were at stage 4 on Thursday, 28 January 2016, will be in ES2016 (\u003ca href=\"https://twitter.com/bterlson/status/692427832555892736\"\u003esource: ECMAScript standard editor Brian Terlson\u003c/a\u003e). That means that ES2016 will contain just two new features (in addition to bug fixes and smaller improvements):\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.2ality.com/2016/02/array-prototype-includes.html\"\u003e\u003ccode\u003eArray.prototype.includes\u003c/code\u003e (Domenic Denicola, Rick Waldron)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.2ality.com/2016/02/exponentiation-operator.html\"\u003eExponentiation Operator (Rick Waldron)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ca href=\"https://tc39.github.io/ecma262/2016/\"\u003eThe draft of ECMAScript 2016\u003c/a\u003e is online and will be ratified in 2016, probably in June.\u003c/p\u003e\n\u003ch3 id=\"the-new-release-process-works\"\u003eThe new release process works\u003c/h3\u003e\u003cp\u003eES2016 being so small demonstrates that \u003ca href=\"http://www.2ality.com/2015/11/tc39-process.html\"\u003ethe new release process\u003c/a\u003e works:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNew features are only included after they are completely ready and after there were at least two implementations that were sufficiently field-tested.\u003c/li\u003e\n\u003cli\u003eReleases happen much more frequently (once a year) and can be more incremental.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf you are disappointed that your favorite stage 3 feature did not make it into ES2016 – don’t worry: With \u003ca href=\"http://www.2ality.com/2015/11/tc39-process.html\"\u003ethe new release process\u003c/a\u003e, it’s more about the stage a proposal is in than what release it is a part of. As soon as a proposal reaches stage 4, it is done and safe to use. You’ll still have to check whether the JavaScript engines that are relevant to you support the feature, but you have to do that with ES6 features, too.\u003c/p\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-5994285079602523609",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/5994285079602523609/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=5994285079602523609",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/5994285079602523609",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/5994285079602523609",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2016/01/ecmascript-2016.html",
						"-rel": "alternate",
						"-title": "The final feature set of ECMAScript 2016 (ES7)",
						"-type": "text/html"
					}
				],
				"published": "2016-01-30T11:37:00.002+01:00",
				"title": {
					"#text": "The final feature set of ECMAScript 2016 (ES7)",
					"-type": "text"
				},
				"total": 0,
				"updated": "2016-04-20T10:01:50.174+02:00"
			},
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": [
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "dev"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "media"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "javascript"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "esnext news"
					}
				],
				"content": {
					"#text": "\u003cp\u003eToday, \u003ca href=\"https://twitter.com/jowe\"\u003eJohannes Weber\u003c/a\u003e \u003ca href=\"https://twitter.com/rauschma\"\u003eand I\u003c/a\u003e are launching a new weekly email newsletter: \u003ca href=\"http://esnextnews.com/\"\u003eES.next News\u003c/a\u003e.\u003c/p\u003e\n\u003ca name='more'\u003e\u003c/a\u003e\n\u003cp\u003eThe concept is simple: you get 5 links related to ECMAScript 6/2015+ per week, via email. Subscribe now, it’s free:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://esnextnews.com/\"\u003eEmail\u003c/a\u003e: one email per week, each Tuesday. \u003ca href=\"http://us12.campaign-archive1.com/?u=d3a2c4d93441c84c0a1e6e808\u0026amp;id=ed71854764\"\u003eYou can check out a sample issue\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://twitter.com/esnextnews\"\u003eTwitter\u003c/a\u003e: all links that will be in the newsletter plus a few more, spread out all over the week.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe see ES.next News as complementary to \u003ca href=\"http://javascriptweekly.com/\"\u003eJavaScript Weekly\u003c/a\u003e (which we recommend, but are not affiliated with). The former is more focused, the latter is more comprehensive.\u003c/p\u003e\n\u003cp\u003eHappy reading!\u003c/p\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-4926712422604856316",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/4926712422604856316/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=4926712422604856316",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/4926712422604856316",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/4926712422604856316",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2016/01/esnext-news.html",
						"-rel": "alternate",
						"-title": "ES.next News: a weekly email newsletter",
						"-type": "text/html"
					}
				],
				"published": "2016-01-20T11:49:00.000+01:00",
				"title": {
					"#text": "ES.next News: a weekly email newsletter",
					"-type": "text"
				},
				"total": 0,
				"updated": "2016-01-20T11:50:08.013+01:00"
			},
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": [
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "esnext"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "technique"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "dev"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "javascript"
					}
				],
				"content": {
					"#text": "\u003cp\u003eIn this blog post, I present \u003ca href=\"https://github.com/rauschma/enumify\"\u003eenumify, a library for implementing enums in JavaScript\u003c/a\u003e. The approach it takes is inspired by Java’s enums.\u003c/p\u003e\n\u003ca name='more'\u003e\u003c/a\u003e\n\u003ch3 id=\"enum-patterns\" class=\"countheads\"\u003eEnum patterns\u003c/h3\u003e\u003cp\u003eThe following is a naive enum pattern for JavaScript:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    const Color = {\n        RED: 0,\n        GREEN: 1,\n        BLUE: 2,\n    }\n\u003c/pre\u003e\n\u003cp\u003eThis implementation has several problems:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eLogging: If you log an enum value such as \u003ccode\u003eColor.RED\u003c/code\u003e, you don’t see its name.\u003c/li\u003e\n\u003cli\u003eType safety: Enum values are not unique, they can be mixed up with other values.\u003c/li\u003e\n\u003cli\u003eMembership check: You can’t easily check whether a given value is an element of \u003ccode\u003eColor\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWe can fix problem #1 by using strings instead of numbers as enum values:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    const Color = {\n        RED: 'RED',\n        GREEN: 'GREEN',\n        BLUE: 'BLUE',\n    }\n\u003c/pre\u003e\n\u003cp\u003eWe additionally get type safety if we use symbols as enum values:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    const Color = {\n        RED: Symbol('RED'),\n        GREEN: Symbol('GREEN'),\n        BLUE: Symbol('BLUE'),\n    }\n    console.log(String(Color.RED));\n        // Symbol(RED)\n\u003c/pre\u003e\n\u003cp\u003eOne problem with symbols is that you need to convert them to strings explicitly, you can’t coerce them (e.g. via \u003ccode\u003e+\u003c/code\u003e or inside template literals):\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    console.log('Color: '+Color.RED)\n        // TypeError: Cannot convert a Symbol value to a string\n\u003c/pre\u003e\n\u003cp\u003eWe still don’t have a simple membership test. Using a custom class for enums gives us that. Additionally, everything becomes more customizable:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    class Color {\n        constructor(name) {\n            this.name = name;\n        }\n        toString() {\n            return `Color.${this.name}`;\n        }\n    }\n    Color.RED = new Color('RED');\n    Color.GREEN = new Color('GREEN');\n    Color.BLUE = new Color('BLUE');\n    \n    console.log(Color.RED); // Color.RED\n    \n    // Membership test:\n    console.log(Color.GREEN instanceof Color); // true\n\u003c/pre\u003e\n\u003cp\u003eHowever, this solution is slightly verbose. Let’s use a library to fix that.\u003c/p\u003e\n\u003ch3 id=\"the-library-enumify\"\u003eThe library \u003ccode\u003eenumify\u003c/code\u003e\u003c/h3\u003e\u003cp\u003e\u003ca href=\"https://github.com/rauschma/enumify\"\u003eThe library \u003ccode\u003eenumify\u003c/code\u003e\u003c/a\u003e lets you turn classes into enums. It is available on \u003ca href=\"https://github.com/rauschma/enumify\"\u003eGitHub\u003c/a\u003e and \u003ca href=\"https://www.npmjs.com/package/enumify\"\u003enpm\u003c/a\u003e. This is how you would implement the running example via it:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    import {Enum} from 'enumify';\n    \n    class Color extends Enum {}\n    Color.initEnum(['RED', 'GREEN', 'BLUE']);\n    \n    console.log(Color.RED); // Color.RED\n    console.log(Color.GREEN instanceof Color); // true\n\u003c/pre\u003e\n\u003cp\u003eThe enum is set up via \u003ccode\u003einitEnum()\u003c/code\u003e, a static method that \u003ccode\u003eColor\u003c/code\u003e inherits from \u003ccode\u003eEnum\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe library “closes” the class \u003ccode\u003eColor\u003c/code\u003e: After \u003ccode\u003eColor.initEnum()\u003c/code\u003e, you can’t create any new instances:\u003c/p\u003e\n\u003cpre class=\"repl\"\u003e\n    \u0026gt; new Color()\n    Error: Enum classes can’t be instantiated\n\u003c/pre\u003e\n\u003ch4 id=\"properties-of-enum-classes\"\u003eProperties of enum classes\u003c/h4\u003e\u003ch5 id=\"enumvalues\"\u003e\u003ccode\u003eenumValues\u003c/code\u003e\u003c/h5\u003e\u003cp\u003eEnums get a static property \u003ccode\u003eenumValues\u003c/code\u003e, which contains an Array with all enum values:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    for (const c of Color.enumValues) {\n        console.log(c);\n    }\n    // Output:\n    // Color.RED\n    // Color.GREEN\n    // Color.BLUE\n\u003c/pre\u003e\n\u003cp\u003eThe values are listed in the order in which they were added to the enum class. As explained later, you can also call \u003ccode\u003einitEnum()\u003c/code\u003e with an object (vs. an Array). Even then, \u003ccode\u003eenumValues\u003c/code\u003e has the expected structure, because objects record the order in which properties are added to them.\u003c/p\u003e\n\u003ch5 id=\"enumvalueof%28%29\"\u003e\u003ccode\u003eenumValueOf()\u003c/code\u003e\u003c/h5\u003e\u003cp\u003eThe inherited tool method \u003ccode\u003eenumValueOf()\u003c/code\u003e maps names to values:\u003c/p\u003e\n\u003cpre class=\"repl\"\u003e\n    \u0026gt; Color.enumValueOf('RED') === Color.RED\n    true\n\u003c/pre\u003e\n\u003cp\u003eThis method is useful for parsing enum values (e.g. if you want to retrieve them from JSON data).\u003c/p\u003e\n\u003ch4 id=\"properties-of-enum-values\"\u003eProperties of enum values\u003c/h4\u003e\u003cp\u003eEnumify adds two properties to every enum value:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ename\u003c/code\u003e: the name of the enum value.\u003c/p\u003e\n\u003cpre class=\"repl\"\u003e\n    \u0026gt; Color.BLUE.name\n    'BLUE'\n\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eordinal\u003c/code\u003e: the position of the enum value within the Array \u003ccode\u003eenumValues\u003c/code\u003e.\u003c/p\u003e\n\u003cpre class=\"repl\"\u003e\n    \u0026gt; Color.BLUE.ordinal\n    2\n\u003c/pre\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"advanced-features\"\u003eAdvanced features\u003c/h4\u003e\u003ch5 id=\"custom-properties-for-enum-values\"\u003eCustom properties for enum values\u003c/h5\u003e\u003cp\u003e\u003ccode\u003einitEnum()\u003c/code\u003e also accepts an object as its parameter. That enables you to add properties to enum values.\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    class TicTacToeColor extends Enum {}\n    \n    // Alas, data properties don’t work, because the enum\n    // values (TicTacToeColor.X etc.) don’t exist when\n    // the object literals are evaluated.\n    TicTacToeColor.initEnum({\n        O: {\n            get inverse() { return TicTacToeColor.X },\n        },\n        X: {\n            get inverse() { return TicTacToeColor.O },\n        },\n    });\n    \n    console.log(TicTacToeColor.O.inverse); // TicTacToeColor.X\n\u003c/pre\u003e\n\u003cp\u003eAnother use case for this feature is defining commands for a user interface:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    class Command extends Enum {}\n    Command.initEnum({\n        CLEAR: {\n            description: 'Clear all entries',\n            run() { /* ··· */ },\n        },\n        ADD_NEW: {\n            description: 'Add new',\n            run() { /* ··· */ },\n        },\n    });\n    console.log('Available commands:');\n    for (let cmd of Command.enumValues) {\n        console.log(cmd.description);\n    }\n    // Output:\n    // Available commands:\n    // Clear all entries\n    // Add new\n\u003c/pre\u003e\n\u003cp\u003eThe instance-specific method \u003ccode\u003erun()\u003c/code\u003e executes the command. \u003ccode\u003eenumValues\u003c/code\u003e enables us to list all available commands.\u003c/p\u003e\n\u003ch5 id=\"custom-prototype-methods\"\u003eCustom prototype methods\u003c/h5\u003e\u003cp\u003eIf you want all enum values to have the same method, you simply add it to the enum class:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    class Weekday extends Enum {\n        isBusinessDay() {\n            switch (this) {\n                case Weekday.SATURDAY:\n                case Weekday.SUNDAY:\n                    return false;\n                default:\n                    return true;\n            }\n        }\n    }\n    Weekday.initEnum([\n        'MONDAY', 'TUESDAY', 'WEDNESDAY',\n        'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY']);\n    \n    console.log(Weekday.SATURDAY.isBusinessDay()); // false\n    console.log(Weekday.MONDAY.isBusinessDay()); // true\n\u003c/pre\u003e\n\u003ch4 id=\"arbitrary-enum-values\"\u003eArbitrary enum values\u003c/h4\u003e\u003cp\u003eOne occasionally requested feature for enums is that enum values be numbers (e.g. for flags) or strings (e.g. to compare with values in HTTP headers). That can be achieved by making those values properties of enum values. For example:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    class Mode extends Enum {}\n    Mode.initEnum({\n        USER_R: {\n            n: 0b100000000,\n        },\n        USER_W: {\n            n: 0b010000000,\n        },\n        USER_X: {\n            n: 0b001000000,\n        },\n        GROUP_R: {\n            n: 0b000100000,\n        },\n        GROUP_W: {\n            n: 0b000010000,\n        },\n        GROUP_X: {\n            n: 0b000001000,\n        },\n        ALL_R: {\n            n: 0b000000100,\n        },\n        ALL_W: {\n            n: 0b000000010,\n        },\n        ALL_X: {\n            n: 0b000000001,\n        },\n    });\n    assert.strictEqual(\n        Mode.USER_R.n | Mode.USER_W.n | Mode.USER_X.n |\n        Mode.GROUP_R.n | Mode.GROUP_X.n |\n        Mode.ALL_R.n | Mode.ALL_X.n,\n        0o755);\n    assert.strictEqual(\n        Mode.USER_R.n | Mode.USER_W.n | Mode.USER_X.n |\n        Mode.GROUP_R.n,\n        0o740);\n\u003c/pre\u003e\n\u003ch4 id=\"state-machines-via-enums\"\u003eState machines via enums\u003c/h4\u003e\u003cp\u003eEnums help with implementing state machines. This is an example:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    class Result extends Enum {}\n    Result.initEnum(['ACCEPTED', 'REJECTED']);\n    \n    class State extends Enum {}\n    State.initEnum({\n        START: {\n            enter(iter) {\n                const {value,done} = iter.next();\n                if (done) {\n                    return Result.REJECTED;\n                }\n                switch (value) {\n                    case 'A':\n                        return State.A_SEQUENCE;\n                    default:\n                        return Result.REJECTED;\n                }\n            }\n        },\n        A_SEQUENCE: ···,\n        B_SEQUENCE: ···,\n        ACCEPT: {\n            enter(iter) {\n                return Result.ACCEPTED;\n            }\n        },\n    });\n    function runStateMachine(str) {\n        let iter = str[Symbol.iterator]();\n        let state = State.START;\n        while (true) {\n            state = state.enter(iter);\n            switch (state) {\n                case Result.ACCEPTED:\n                    return true;\n                case Result.REJECTED:\n                    return false;\n            }\n        }\n    }\n    \n    runStateMachine('AABBB'); // true\n    runStateMachine('AA'); // false\n    runStateMachine('AABBC'); // false\n\u003c/pre\u003e\n\u003ch3 id=\"built-in-enums-for-javascript%3F\"\u003eBuilt-in enums for JavaScript?\u003c/h3\u003e\u003cp\u003e\u003ca href=\"https://gist.github.com/rauschma/f3e77132319e09b94722\"\u003eThis is a Gist sketching what built-in enums could look like\u003c/a\u003e. For example:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    enum Color {\n        RED, GREEN, BLUE\n    }\n    \n    enum TicTacToeColor {\n        O {\n            get inverse() { return TicTacToeColor.X }\n        },\n        X {\n            get inverse() { return TicTacToeColor.O }\n        },    \n    }\n    \n    enum Weekday {\n        MONDAY, TUESDAY, WEDNESDAY,\n        THURSDAY, FRIDAY, SATURDAY, SUNDAY;\n        isBusinessDay() {\n            switch (this) {\n                case Weekday.SATURDAY:\n                case Weekday.SUNDAY:\n                    return false;\n                default:\n                    return true;\n            }\n        }\n    }\n    \n    enum Mode {\n        USER_R {\n            n: 0b100000000,\n        },\n        USER_W {\n            n: 0b010000000,\n        },\n        USER_X {\n            n: 0b001000000,\n        },\n        GROUP_R {\n            n: 0b000100000,\n        },\n        GROUP_W {\n            n: 0b000010000,\n        },\n        GROUP_X {\n            n: 0b000001000,\n        },\n        ALL_R {\n            n: 0b000000100,\n        },\n        ALL_W {\n            n: 0b000000010,\n        },\n        ALL_X {\n            n: 0b000000001,\n        },\n    }\n\u003c/pre\u003e\n\u003ch3 id=\"enums-in-typescript\"\u003eEnums in TypeScript\u003c/h3\u003e\u003cp\u003eTypeScript has built-in support for enums:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    enum Color {\n        RED, GREEN, BLUE\n    }\n\u003c/pre\u003e\n\u003cp\u003eThis is how the enum is implemented:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    var Color;\n    (function (Color) {\n        Color[Color[\"RED\"] = 0] = \"RED\";\n        Color[Color[\"GREEN\"] = 1] = \"GREEN\";\n        Color[Color[\"BLUE\"] = 2] = \"BLUE\";\n    })(Color || (Color = {}));\n\u003c/pre\u003e\n\u003cp\u003eThis code makes the following assignments:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    Color[\"RED\"] = 0;\n    Color[\"GREEN\"] = 1;\n    Color[\"BLUE\"] = 2;\n    \n    Color[0] = \"RED\";\n    Color[1] = \"GREEN\";\n    Color[2] = \"BLUE\";\n\u003c/pre\u003e\n\u003cp\u003eTypeScript’s enums have all the disadvantages mentioned for the first enum example earlier: No names for logging, no type safety and no membership tests. You can’t customize these enums, either.\u003c/p\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-1651272864384562260",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/1651272864384562260/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=1651272864384562260",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/1651272864384562260",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/1651272864384562260",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2016/01/enumify.html",
						"-rel": "alternate",
						"-title": "Enumify: better enums for JavaScript",
						"-type": "text/html"
					}
				],
				"published": "2016-01-15T16:54:00.000+01:00",
				"title": {
					"#text": "Enumify: better enums for JavaScript",
					"-type": "text"
				},
				"total": 0,
				"updated": "2016-01-19T06:54:24.630+01:00"
			},
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": [
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "esnext"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "dev"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "javascript"
					}
				],
				"content": {
					"#text": "\u003cp\u003eThis blog post explains that classes have lexical inner names, just like named function expressions.\u003c/p\u003e\n\u003ca name='more'\u003e\u003c/a\u003e\n\u003ch3 id=\"the-inner-names-of-function-expressions\" class=\"countheads\"\u003eThe inner names of function expressions\u003c/h3\u003e\u003cp\u003eYou may know that function expressions have lexical inner names:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    const fac = function me(n) {\n        if (n \u0026gt; 0) {\n            // Use inner name `me` to\n            // refer to the function\n            return n * me(n-1);\n        } else {\n            return 1;\n        }\n    };\n    console.log(fac(3)); // 6\n\u003c/pre\u003e\n\u003cp\u003eThe name \u003ccode\u003eme\u003c/code\u003e of the named function expression becomes a lexically bound variable that is unaffected by which variable currently holds the function.\u003c/p\u003e\n\u003ch3 id=\"the-inner-names-of-classes\"\u003eThe inner names of classes\u003c/h3\u003e\u003cp\u003eInterestingly, ES6 classes also have lexical inner names that you can use in methods (constructor methods and regular methods):\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    class C {\n        constructor() {\n            // Use inner name C to refer to class\n            console.log(`constructor: ${C.prop}`);\n        }\n        logProp() {\n            // Use inner name C to refer to class\n            console.log(`logProp: ${C.prop}`);\n        }\n    }\n    C.prop = 'Hi!';\n    \n    const D = C;\n    C = null;\n    \n    // C is not a class, anymore:\n    new C().logProp();\n        // TypeError: C is not a function\n    \n    // But inside the class, the identifier C\n    // still works\n    new D().logProp();\n        // constructor: Hi!\n        // logProp: Hi!\n\u003c/pre\u003e\n\u003cp\u003e(In the ES6 spec the inner name is set up by \u003ca href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-runtime-semantics-classdefinitionevaluation\"\u003ethe dynamic semantics of ClassDefinitionEvaluation\u003c/a\u003e.)\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAcknowledgement:\u003c/strong\u003e Thanks to Michael Ficarra for pointing out that classes have inner names.\u003c/p\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-836831510310208442",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/836831510310208442/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=836831510310208442",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/836831510310208442",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/836831510310208442",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2016/01/classes-inner-names.html",
						"-rel": "alternate",
						"-title": "ES6 classes have inner names",
						"-type": "text/html"
					}
				],
				"published": "2016-01-09T22:14:00.000+01:00",
				"title": {
					"#text": "ES6 classes have inner names",
					"-type": "text"
				},
				"total": 0,
				"updated": "2016-01-09T22:14:54.224+01:00"
			},
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": [
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "dev"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "nodejs"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "javascript"
					}
				],
				"content": {
					"#text": "\u003cp\u003eOne nice npm feature is that you can install packages with executables locally. This blog post explains how to run locally installed executables.\u003c/p\u003e\n\u003ca name='more'\u003e\u003c/a\u003e\n\u003ch3 id=\"running-executables-from-a-nearby-node_modules\" class=\"countheads\"\u003eRunning executables from a nearby \u003ccode\u003enode_modules\u003c/code\u003e\u003c/h3\u003e\u003cp\u003e(An aside, on the topic of packages versus modules: npm packages may or may not contain Node.js modules.)\u003c/p\u003e\n\u003cp\u003eIf you require a module, Node.js looks for it by going through all \u003ccode\u003enode_modules/\u003c/code\u003e directories in ancestor directories (\u003ccode\u003e./node_modules/\u003c/code\u003e, \u003ccode\u003e../node_modules/\u003c/code\u003e, \u003ccode\u003e../../node_modules/\u003c/code\u003e, etc.). The first appropriate module that is found is used.\u003c/p\u003e\n\u003cp\u003eWhenever you are somewhere in the file system, \u003ccode\u003enpm root\u003c/code\u003e tells you where it would install packages if you used \u003ccode\u003enpm install\u003c/code\u003e. That directory \u003ccode\u003enode_modules/\u003c/code\u003e may or may not exist, already; in the following example, directory \u003ccode\u003e/tmp/\u003c/code\u003e is empty.\u003c/p\u003e\n\u003cpre class=\"text\"\u003e\n    $ cd /tmp/\n    $ npm root\n    /tmp/node_modules\n\u003c/pre\u003e\n\u003cp\u003eWhen executables are installed via npm packages, npm links to them:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIn local installs, they are linked to from a \u003ccode\u003enode_modules/.bin/\u003c/code\u003e directory.\u003c/li\u003e\n\u003cli\u003eIn global installs, they are linked to from a global \u003ccode\u003ebin/\u003c/code\u003e directory (e.g. \u003ccode\u003e/usr/local/bin\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe command \u003ccode\u003enpm bin\u003c/code\u003e lets you find out where the closest executables are:\u003c/p\u003e\n\u003cpre class=\"text\"\u003e\n    $ npm bin\n    /tmp/node_modules/.bin\n\u003c/pre\u003e\n\u003cp\u003eIf your shell is bash then you can define the following command for running executables from that directory:\u003c/p\u003e\n\u003cpre class=\"text\"\u003e\n    function npm-do { (PATH=$(npm bin):$PATH; eval $@;) }\n\u003c/pre\u003e\n\u003cp\u003eLet’s try out that shell command: We install package \u003ccode\u003efiglet-cli\u003c/code\u003e that comes with an executable. npm puts multiple packages into the closest \u003ccode\u003enode_modules/\u003c/code\u003e and links to the executable \u003ccode\u003efiglet\u003c/code\u003e from \u003ccode\u003enode_modules/.bin/\u003c/code\u003e:\u003c/p\u003e\n\u003cpre class=\"text\"\u003e\n    $ npm install figlet-cli\n    $ ls -1 /tmp/node_modules/\n    figlet\n    figlet-cli\n    minimist\n    optimist\n    wordwrap\n    $ ls -1 /tmp/node_modules/.bin\n    figlet\n\u003c/pre\u003e\n\u003cp\u003eIf we run \u003ccode\u003efiglet\u003c/code\u003e as a normal shell command, it fails, because we haven’t installed the package (and thus the executable) globally. However, \u003ccode\u003enpm-do\u003c/code\u003e allows us to run \u003ccode\u003efiglet\u003c/code\u003e.\u003c/p\u003e\n\u003cpre class=\"text\"\u003e\n    $ figlet hi\n    -bash: figlet: command not found\n    $ npm-do figlet hi\n      _     _\n     | |__ (_)\n     | '_ \\| |\n     | | | | |\n     |_| |_|_|\n\u003c/pre\u003e\n\u003ch3 id=\"inside-an-npm-package\"\u003eInside an npm package\u003c/h3\u003e\u003cp\u003eI’m using the repo \u003ca href=\"https://github.com/rauschma/npm-bin-demo\"\u003e\u003ccode\u003enpm-bin-demo\u003c/code\u003e\u003c/a\u003e to demonstrate running executables from inside an npm package. This repo is installed as follows (feel free to read on without doing that):\u003c/p\u003e\n\u003cpre class=\"text\"\u003e\n    git clone https://github.com/rauschma/npm-bin-demo.git\n    cd npm-bin-demo/\n    npm install\n\u003c/pre\u003e\n\u003cp\u003eThat package has the following \u003ccode\u003epackage.json\u003c/code\u003e:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    {\n      \"bin\": {\n        \"hello\": \"./hello.js\"\n      },\n      \"scripts\": {\n        \"fig\": \"figlet\",\n        \"hello\": \"./hello.js\"\n      },\n      \"dependencies\": {\n        \"figlet-cli\": \"^0.1.0\"\n      }\n    }\n\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ebin\u003c/code\u003e: lists the executables provided by this package. It only matters if this package is installed via npm and then affects the \u003ccode\u003enode_modules/\u003c/code\u003e of an ancestor directory.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003escripts\u003c/code\u003e: defines commands that you can execute via \u003ccode\u003enpm run\u003c/code\u003e if the current \u003ccode\u003epackage.json\u003c/code\u003e is the one that is closest to your current working directory. Note that we can use \u003ccode\u003efiglet\u003c/code\u003e as if it were a globally installed shell command. That’s because npm adds local \u003ccode\u003e.bin/\u003c/code\u003e directories to the shell path before it executes scripts.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003edependencies\u003c/code\u003e: lists packages that are installed by \u003ccode\u003enpm install\u003c/code\u003e, into \u003ccode\u003enpm-bin-demo/node_modules/\u003c/code\u003e. As you can see, we have installed \u003ccode\u003efiglet-cli\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLet’s examine our surroundings (remember that we are still inside the directory \u003ccode\u003enpm-bin-demo/\u003c/code\u003e):\u003c/p\u003e\n\u003cpre class=\"text\"\u003e\n    $ npm root\n    /tmp/npm-bin-demo/node_modules\n    $ ls -1 node_modules/\n    figlet\n    figlet-cli\n    minimist\n    optimist\n    wordwrap\n    \n    $ npm bin\n    /tmp/npm-bin-demo/node_modules/.bin\n    $ ls -1 node_modules/.bin/\n    figlet\n\u003c/pre\u003e\n\u003cp\u003eAs expected, there is no shell command \u003ccode\u003efiglet\u003c/code\u003e, but we can run \u003ccode\u003efiglet\u003c/code\u003e via \u003ccode\u003enpm-do\u003c/code\u003e:\u003c/p\u003e\n\u003cpre class=\"text\"\u003e\n    $ figlet hi\n    -bash: figlet: command not found\n    $ npm-do figlet hi\n      _     _\n     | |__ (_)\n     | '_ \\| |\n     | | | | |\n     |_| |_|_|\n\u003c/pre\u003e\n\u003cp\u003eWe can also execute \u003ccode\u003efiglet\u003c/code\u003e via \u003ccode\u003enpm run\u003c/code\u003e:\u003c/p\u003e\n\u003cpre class=\"text\"\u003e\n    $ npm run fig hi\n    \n    \u0026gt; @ fig /Users/rauschma/tmp/npm-bin-demo\n    \u0026gt; figlet \"hi\"\n    \n      _     _\n     | |__ (_)\n     | '_ \\| |\n     | | | | |\n     |_| |_|_|\n\u003c/pre\u003e\n\u003cp\u003eAs explained previously, the entries in \u003ccode\u003ebin\u003c/code\u003e have no effect inside a package, which is why we can’t run \u003ccode\u003ehello\u003c/code\u003e via \u003ccode\u003enpm-do\u003c/code\u003e:\u003c/p\u003e\n\u003cpre class=\"text\"\u003e\n    $ npm-do hello\n    -bash: hello: command not found\n\u003c/pre\u003e\n\u003cp\u003eWe can, however, run the script whose name is \u003ccode\u003ehello\u003c/code\u003e:\u003c/p\u003e\n\u003cpre class=\"text\"\u003e\n    $ npm run hello\n    \n    \u0026gt; @ hello /tmp/npm-bin-demo\n    \u0026gt; ./hello.js\n    \n    Hello everyone!\n\u003c/pre\u003e\n\u003ch3 id=\"further-reading\"\u003eFurther reading\u003c/h3\u003e\u003cp\u003eFor more information on the topic of local npm installs, consult Sect. “\u003ca href=\"https://leanpub.com/setting-up-es6/read#leanpub-auto-npm-and-local-installs\"\u003enpm and local installs\u003c/a\u003e” in “Setting up ES6”.\u003c/p\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-8171609426488036478",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/8171609426488036478/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=8171609426488036478",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/8171609426488036478",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/8171609426488036478",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2016/01/locally-installed-npm-executables.html",
						"-rel": "alternate",
						"-title": "Running locally installed npm executables",
						"-type": "text/html"
					}
				],
				"published": "2016-01-07T18:51:00.000+01:00",
				"title": {
					"#text": "Running locally installed npm executables",
					"-type": "text"
				},
				"total": 0,
				"updated": "2016-01-07T18:52:40.598+01:00"
			},
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": [
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "esnext"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "dev"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "javascript"
					}
				],
				"content": {
					"#text": "\u003cp\u003eThis blog post explains four approaches for managing private data for ES6 classes:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eKeeping private data in the environment of a class \u003ccode\u003econstructor\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eMarking private properties via a naming convention (e.g. a prefixed underscore)\u003c/li\u003e\n\u003cli\u003eKeeping private data in WeakMaps\u003c/li\u003e\n\u003cli\u003eUsing symbols as keys for private properties\u003c/li\u003e\n\u003c/ol\u003e\n\u003ca name='more'\u003e\u003c/a\u003e\n\u003cp\u003eApproaches #1 and #2 were already common in ES5, for constructors. Approaches #3 and #4 are new in ES6. Let’s implement the same example four times, via each of the approaches.\u003c/p\u003e\n\u003ch3 id=\"keeping-private-data-in-the-environment-of-a-class-constructor\" class=\"countheads\"\u003eKeeping private data in the environment of a class \u003ccode\u003econstructor\u003c/code\u003e\u003c/h3\u003e\u003cp\u003eOur running example is a class \u003ccode\u003eCountdown\u003c/code\u003e that invokes a callback \u003ccode\u003eaction\u003c/code\u003e once a counter (whose initial value is \u003ccode\u003ecounter\u003c/code\u003e) reaches zero. The two parameters \u003ccode\u003eaction\u003c/code\u003e and \u003ccode\u003ecounter\u003c/code\u003e should be stored as private data.\u003c/p\u003e\n\u003cp\u003eIn the first implementation, we store \u003ccode\u003eaction\u003c/code\u003e and \u003ccode\u003ecounter\u003c/code\u003e in the \u003cem\u003eenvironment\u003c/em\u003e of the class constructor. An environment is the internal data structure, in which a JavaScript engine stores the parameters and local variables that come into existence whenever a new scope is entered (e.g. via a function call or a constructor call). This is the code:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    class Countdown {\n        constructor(counter, action) {\n            Object.assign(this, {\n                dec() {\n                    if (counter \u0026lt; 1) return;\n                    counter--;\n                    if (counter === 0) {\n                        action();\n                    }\n                }\n            });\n        }\n    }\n\u003c/pre\u003e\n\u003cp\u003eUsing \u003ccode\u003eCountdown\u003c/code\u003e looks like this:\u003c/p\u003e\n\u003cpre class=\"repl\"\u003e\n    \u0026gt; let c = new Countdown(2, () =\u0026gt; console.log('DONE'));\n    \u0026gt; c.dec();\n    \u0026gt; c.dec();\n    DONE\n\u003c/pre\u003e\n\u003cp\u003ePro:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe private data is completely safe\u003c/li\u003e\n\u003cli\u003eThe names of private properties won’t clash with the names of other private properties (of superclasses or subclasses).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCons:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe code becomes less elegant, because you need to add all methods to the instance, inside the constructor (at least those methods that need access to the private data).\u003c/li\u003e\n\u003cli\u003eDue to the instance methods, the code wastes memory. If the methods were prototype methods, they would be shared.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMore information on this technique: Sect. “\u003ca href=\"http://speakingjs.com/es5/ch17.html#private_data_constructor_environment\"\u003ePrivate Data in the Environment of a Constructor (Crockford Privacy Pattern)\u003c/a\u003e” in “Speaking JavaScript”.\u003c/p\u003e\n\u003ch3 id=\"marking-private-properties-via-a-naming-convention\"\u003eMarking private properties via a naming convention\u003c/h3\u003e\u003cp\u003eThe following code keeps private data in properties whose names a marked via a prefixed underscore:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    class Countdown {\n        constructor(counter, action) {\n            this._counter = counter;\n            this._action = action;\n        }\n        dec() {\n            if (this._counter \u0026lt; 1) return;\n            this._counter--;\n            if (this._counter === 0) {\n                this._action();\n            }\n        }\n    }\n\u003c/pre\u003e\n\u003cp\u003ePros:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCode looks nice.\u003c/li\u003e\n\u003cli\u003eWe can use prototype methods.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCons:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNot safe, only a guideline for client code.\u003c/li\u003e\n\u003cli\u003eThe names of private properties can clash.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"keeping-private-data-in-weakmaps\"\u003eKeeping private data in WeakMaps\u003c/h3\u003e\u003cp\u003eThere is a neat technique involving WeakMaps that combines the advantage of the first approach (safety) with the advantage of the second approach (being able to use prototype methods). This technique is demonstrated in the following code: we use the WeakMaps \u003ccode\u003e_counter\u003c/code\u003e and \u003ccode\u003e_action\u003c/code\u003e to store private data.\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    let _counter = new WeakMap();\n    let _action = new WeakMap();\n    class Countdown {\n        constructor(counter, action) {\n            _counter.set(this, counter);\n            _action.set(this, action);\n        }\n        dec() {\n            let counter = _counter.get(this);\n            if (counter \u0026lt; 1) return;\n            counter--;\n            _counter.set(this, counter);\n            if (counter === 0) {\n                _action.get(this)();\n            }\n        }\n    }\n\u003c/pre\u003e\n\u003cp\u003eEach of the two WeakMaps \u003ccode\u003e_counter\u003c/code\u003e and \u003ccode\u003e_action\u003c/code\u003e maps objects to their private data. Due to how WeakMaps work that won’t prevent objects from being garbage-collected. As long as you keep the WeakMaps hidden from the outside world, the private data is safe. If you want to be even safer, you can store \u003ccode\u003eWeakMap.prototype.get\u003c/code\u003e and \u003ccode\u003eWeakMap.prototype.set\u003c/code\u003e in temporary variables and invoke those (instead of the methods, dynamically). Then our code wouldn’t be affected if malicious code replaced those methods with ones that snoop on our private data. However, we are only protected against code that runs after our code. There is nothing we can do if it runs before ours.\u003c/p\u003e\n\u003cp\u003ePros:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWe can use prototype methods.\u003c/li\u003e\n\u003cli\u003eSafer than a naming convention for property keys.\u003c/li\u003e\n\u003cli\u003eThe names of private properties can’t clash.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCon:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCode is not as elegant as a naming convention.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"using-symbols-as-keys-for-private-properties\"\u003eUsing symbols as keys for private properties\u003c/h3\u003e\u003cp\u003eAnother storage location for private data are properties whose keys are symbols:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    const _counter = Symbol('counter');\n    const _action = Symbol('action');\n    \n    class Countdown {\n        constructor(counter, action) {\n            this[_counter] = counter;\n            this[_action] = action;\n        }\n        dec() {\n            if (this[_counter] \u0026lt; 1) return;\n            this[_counter]--;\n            if (this[_counter] === 0) {\n                this[_action]();\n            }\n        }\n    }\n\u003c/pre\u003e\n\u003cp\u003eEach symbol is unique, which is why a symbol-valued property key will never clash with any other property key. Additionally, symbols are somewhat hidden from the outside world, but not completely:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    let c = new Countdown(2, () =\u0026gt; console.log('DONE'));\n    \n    console.log(Object.keys(c));\n        // []\n    console.log(Reflect.ownKeys(c));\n        // [ Symbol(counter), Symbol(action) ]\n\u003c/pre\u003e\n\u003cp\u003ePros:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWe can use prototype methods.\u003c/li\u003e\n\u003cli\u003eThe names of private properties can’t clash.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCons:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCode is not as elegant as a naming convention.\u003c/li\u003e\n\u003cli\u003eNot safe: you can list all property keys (including symbols!) of an object via \u003ccode\u003eReflect.ownKeys()\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"further-reading\"\u003eFurther reading\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003eSect. “\u003ca href=\"http://speakingjs.com/es5/ch17.html#private_data_for_objects\"\u003eKeeping Data Private\u003c/a\u003e” in “Speaking JavaScript” (covers ES5 techniques)\u003c/li\u003e\n\u003cli\u003eChap. “\u003ca href=\"http://exploringjs.com/es6/ch_classes.html\"\u003eClasses\u003c/a\u003e” in “Exploring ES6”\u003c/li\u003e\n\u003cli\u003eChap. “\u003ca href=\"http://exploringjs.com/es6/ch_symbols.html\"\u003eSymbols\u003c/a\u003e” in “Exploring ES6”\u003c/li\u003e\n\u003c/ul\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-9053652717048330059",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/9053652717048330059/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=9053652717048330059",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/9053652717048330059",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/9053652717048330059",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2016/01/private-data-classes.html",
						"-rel": "alternate",
						"-title": "Managing the private data of ES6 classes",
						"-type": "text/html"
					}
				],
				"published": "2016-01-04T16:35:00.003+01:00",
				"title": {
					"#text": "Managing the private data of ES6 classes",
					"-type": "text"
				},
				"total": 0,
				"updated": "2016-01-04T23:46:14.419+01:00"
			},
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": [
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "dev"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "javascript"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "webdev"
					}
				],
				"content": {
					"#text": "\u003cp\u003eIn 2015, there was an amazing amount of innovation related to the web platform. The following sections describe six technologies that I find exciting:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eElectron\u003c/li\u003e\n\u003cli\u003eReact Native\u003c/li\u003e\n\u003cli\u003eProgressive web apps\u003c/li\u003e\n\u003cli\u003eVisual studio code\u003c/li\u003e\n\u003cli\u003eRollup\u003c/li\u003e\n\u003cli\u003eWeb Assembly\u003c/li\u003e\n\u003c/ul\u003e\n\u003ca name='more'\u003e\u003c/a\u003e\n\u003cp\u003eThis blog post is a loose follow-up to “\u003ca href=\"http://www.2ality.com/2014/01/web-platform-2014.html\"\u003eWeb platform: five technologies to look forward to in 2014\u003c/a\u003e”, which I wrote in early 2014.\u003c/p\u003e\n\u003ch3 id=\"electron\" class=\"countheads\"\u003eElectron\u003c/h3\u003e\u003cp\u003e\u003ca href=\"http://electron.atom.io/\"\u003eElectron (by GitHub)\u003c/a\u003e lets you build cross-platform desktop apps with web technologies. Its features include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAutomatic updates\u003c/li\u003e\n\u003cli\u003eCrash reporting\u003c/li\u003e\n\u003cli\u003eWindows installers\u003c/li\u003e\n\u003cli\u003eDebugging and profiling\u003c/li\u003e\n\u003cli\u003eNative menus and notifications\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eElectron was initially created for GitHub’s editor \u003cem\u003eAtom\u003c/em\u003e and is now used by various companies, including Microsoft (Visual Studio Code, see below), Slack and Docker.\u003c/p\u003e\n\u003cp\u003eArchitecturally, Electron contains both a Node.js runtime and a minimal embedded Chromium browser. Electron apps run in several processes: A \u003cem\u003emain process\u003c/em\u003e runs the \u003ccode\u003emain\u003c/code\u003e script specified by the app’s \u003ccode\u003epackage.json\u003c/code\u003e file. To display a user interface, that script can open windows. Each of those windows runs in a separate process (a so-called \u003cem\u003erenderer process\u003c/em\u003e), just like a tab in a web browser.\u003c/p\u003e\n\u003ch3 id=\"react-native\"\u003eReact Native\u003c/h3\u003e\u003cp\u003eWith \u003ca href=\"https://facebook.github.io/react-native/\"\u003eReact Native\u003c/a\u003e, you can build native apps for iOS and Android via React. The virtual DOM is still there and you still use JSX to create it, but the actual UI is built with native components such as UITabBar on iOS and Drawer on Android. You lay out those native components via Flexbox.\u003c/p\u003e\n\u003cp\u003eOn one hand that means that each of the following platforms has a slightly different UI layer now: the web, iOS, Android. On the other hand, you’ll be able to reuse much of your code, while having a native experience on each platform.\u003c/p\u003e\n\u003cp\u003eUsually I’m skeptical of solutions that try to transplant a language that is native on one platform to another one. But a few months ago, \u003ca href=\"https://medium.com/ios-os-x-development/an-ios-developer-on-react-native-1f24786c29f0\"\u003ean iOS developer evaluated React Native\u003c/a\u003e and stated:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eI may never write an iOS app in Objective-C or Swift again.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThis is remarkable if you consider that he had to learn both JavaScript and React before he could be productive with React Native.\u003c/p\u003e\n\u003cp\u003eAnother \u003ca href=\"https://twitter.com/andy_matuschak/status/560511204867575808\"\u003einteresting quote\u003c/a\u003e, by Andy Matuschak (who “helped build iOS 4.1–8 on the UIKit team”):\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eI say with confidence as a former UIKit author: React\u0026#39;s model for the UI layer is vastly better than UIKit\u0026#39;s. React Native is a *huge* deal.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"progressive-web-apps\"\u003eProgressive web apps\u003c/h3\u003e\u003cp\u003eThere are areas, where native apps have caught up with the web (deep linking, indexing). \u003cem\u003eProgressive web apps\u003c/em\u003e are not really a technology, but rather an umbrella term for characteristics of modern web apps. These mean that web apps are catching up with native apps in some areas and moving ahead of them in others:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eProgressive enhancement: The app runs in as many environments as possible. If it needs a service, it should use whatever is available and degrade gracefully if nothing is there.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eResponsive user interface: The app adapts to various input methods (touch, speech, etc.) and output methods (different screen sizes, vibration, audio, braille displays, etc.).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eConnectivity-independence: The app works well offline and with intermittent or low-bandwith connectivity.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eApp-like UI: The app adopts UI elements of native platforms, including a fast-loading user interface (which can be achieved by caching important assets via service workers).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eContinuous updates (“freshness”): The service worker API defines a process for automatically updating apps to new versions.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eSecure communication: The app is served and communicates via HTTPS, to prevent snooping and attacks.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eApp discovery: Meta-data such as \u003ca href=\"http://www.w3.org/TR/appmanifest/\"\u003eW3C web app manfests\u003c/a\u003e enables search engines to find web apps.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ePush interaction (“re-engagement”): Features such as push notifications actively keep users up-to-date.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eNatively installable: On some platforms, you can install a web app so that it feels like a native app (icon on home screen, separate entry in app switcher, browser chrome optional). All without going through a native app store.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eLinkability: Easily share apps via URLs and run them without installation.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI’m mentioning progressive web apps here, because I like all of the aforementioned techniques and technologies. But I’m not sure how much “progressive web apps” are different from simply “modern web apps”. One idea I oppose is \u003ca href=\"https://developers.google.com/web/fundamentals/engage-and-retain/simplified-app-installs/\"\u003egiving web apps install banners\u003c/a\u003e (their killer feature is, after all, that they don’t need those).\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFurther reading:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developers.google.com/web/progressive-web-apps\"\u003eProgressive Web Apps\u003c/a\u003e (site by Google)\u003c/li\u003e\n\u003cli\u003e“\u003ca href=\"https://trib.tv/2015/10/11/progressive-apps/\"\u003e‘Progressive apps’ are a bag of carrots\u003c/a\u003e” by Andrew Betts. Andrew is critical of “progressive web apps” as a brand. The blog post starts with an interesting examination of that brand.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"visual-studio-code\"\u003eVisual Studio Code\u003c/h3\u003e\u003cp\u003e\u003ca href=\"https://code.visualstudio.com/\"\u003eVisual Studio Code\u003c/a\u003e is a JavaScript code editor for whom the goal is to exist in the space between full IDEs and text editors. And, in my opinion, it succeeds nicely. A plus is that it’s written in JavaScript and based on Electron. In 2015, VSC became \u003ca href=\"https://github.com/Microsoft/vscode\"\u003eopen source\u003c/a\u003e and gained \u003ca href=\"https://code.visualstudio.com/Docs/extensions/overview\"\u003e\u003cem\u003eextensions\u003c/em\u003e\u003c/a\u003e (an API for extending it via plugins).\u003c/p\u003e\n\u003ch3 id=\"rollup\"\u003eRollup\u003c/h3\u003e\u003cp\u003e\u003ca href=\"http://rollupjs.org/\"\u003eRollup\u003c/a\u003e is a \u003cem\u003emodule bundler\u003c/em\u003e: it converts multiple ES6 modules into a single \u003cem\u003ebundle\u003c/em\u003e, a module in either one of serveral formats (ES6, CommonJS, …). Rollup brings two innovations to the world of JavaScript modules:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eThe bundle it outputs only includes those exports that are actually used, via a technique called “tree-shaking”. Three-shaking crucially depends on the static structure of ES6 modules. “Static structure” means that they are analyzable at compile time, without executing any of their code. Having this kind of dead code elimination is great, because we are now free to make modules as big or as tiny as makes sense, without having to worry about the sizes of bundles.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIt demonstrates that ES6 modules are a viable bundle format for ES6 modules (obviating the need for any kind of custom loading).\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eFurther reading:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://rollupjs.org/guide/\"\u003eThe Rollup Guide\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.2ality.com/2015/12/webpack-tree-shaking.html\"\u003eTree-shaking with webpack 2 and Babel 6\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.2ality.com/2015/12/bundling-modules-future.html\"\u003eThe future of bundling JavaScript modules\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"web-assembly\"\u003eWeb Assembly\u003c/h3\u003e\u003cp\u003eWeb Assembly is a binary format for a static formal language (derived from asm.js) that can be fed into JavaScript engines (that support it) to create fast executables. The formal language is higher-level than bytecode and therefore easier to evolve. The output lives inside the universe of JavaScript and therefore integrates well with it. Given how fast asm.js is, C++ compiled to Web Assembly will run roughly 70% as fast as when you compile it to native code.\u003c/p\u003e\n\u003cp\u003eWeb Assembly will probably eventually get support for JavaScript OOP. At that point, it will truly be a universal virtual machine for the web.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFurther reading:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.2ality.com/2015/06/web-assembly.html\"\u003eWebAssembly: a binary format for the web\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-983012197706692714",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/983012197706692714/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=983012197706692714",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/983012197706692714",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/983012197706692714",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2016/01/web-technologies-2015.html",
						"-rel": "alternate",
						"-title": "Looking back on 2015: six exciting web technologies",
						"-type": "text/html"
					}
				],
				"published": "2016-01-02T23:59:00.002+01:00",
				"title": {
					"#text": "Looking back on 2015: six exciting web technologies",
					"-type": "text"
				},
				"total": 0,
				"updated": "2016-01-04T23:58:21.576+01:00"
			},
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": [
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "esnext"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "book"
					}
				],
				"content": {
					"#text": "\u003cp\u003eMy latest book is called “\u003ca href=\"https://leanpub.com/setting-up-es6\"\u003eSetting up ES6\u003c/a\u003e”. It covers the following topics:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA cheat sheet for deploying ECMAScript 6\u003c/li\u003e\n\u003cli\u003eExample setups (skeleton projects that you can download from GitHub):\u003cul\u003e\n\u003cli\u003eES6 in browsers via webpack and Babel\u003c/li\u003e\n\u003cli\u003eES6 in Node.js via Babel (compiled dynamically or statically)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eHow to configure Babel 6, including a clear explanation of how it interacts with CommonJS modules\u003c/li\u003e\n\u003c/ul\u003e\n\u003ca name='more'\u003e\u003c/a\u003e\n\n\u003cp\u003e\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"http://3.bp.blogspot.com/-a-rnSs2w2rg/VoaO3m9l_AI/AAAAAAAABKw/Ln9iRBhqeIM/s1600/cover-setting-up-es6.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg style=\"padding:0 0 0 0\" border=\"0\" src=\"http://3.bp.blogspot.com/-a-rnSs2w2rg/VoaO3m9l_AI/AAAAAAAABKw/Ln9iRBhqeIM/s1600/cover-setting-up-es6.jpg\"\u003e\u003c/a\u003e\u003c/div\u003e\n\u003c/p\u003e\n\u003cp\u003e“\u003ca href=\"https://leanpub.com/setting-up-es6\"\u003eSetting up ES6\u003c/a\u003e” was conceived as a companion to my other book, “\u003ca href=\"http://exploringjs.com/\"\u003eExploring ES6\u003c/a\u003e”:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e“\u003ca href=\"http://exploringjs.com/\"\u003eExploring ES6\u003c/a\u003e” is supposed to remain relevant for a longer time, so that a print edition makes sense (which I still intend to publish, hopefully by mid-2016).\u003c/li\u003e\n\u003cli\u003e“\u003ca href=\"https://leanpub.com/setting-up-es6\"\u003eSetting up ES6\u003c/a\u003e” will age more quickly. It mainly documents my attempts to understand how Babel 6 works. In a way, you could call it “Setting up Babel 6”. But it has a slightly broader scope, especially the first chapter on deploying ES6.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHappy reading – the contents of “\u003ca href=\"https://leanpub.com/setting-up-es6\"\u003eSetting up ES6\u003c/a\u003e” are free to read online. If you like the book then you can support my work by buying the offline version (PDF, EPUB, MOBI).\u003c/p\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-9089945074154388056",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/9089945074154388056/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=9089945074154388056",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/9089945074154388056",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/9089945074154388056",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2016/01/book-setting-up-es6.html",
						"-rel": "alternate",
						"-title": "My new book: “Setting up ES6”",
						"-type": "text/html"
					}
				],
				"published": "2016-01-01T15:40:00.000+01:00",
				"thumbnail": {
					"-height": 72,
					"-media": "http://search.yahoo.com/mrss/",
					"-url": "http://3.bp.blogspot.com/-a-rnSs2w2rg/VoaO3m9l_AI/AAAAAAAABKw/Ln9iRBhqeIM/s72-c/cover-setting-up-es6.jpg",
					"-width": 72
				},
				"title": {
					"#text": "My new book: “Setting up ES6”",
					"-type": "text"
				},
				"total": 0,
				"updated": "2016-01-01T15:45:09.991+01:00"
			},
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": [
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "esnext"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "dev"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "javascript"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "jsmodules"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "jstools"
					}
				],
				"content": {
					"#text": "\u003cp\u003eThis blog post examines how the bundling of modules is affected by two future developments: HTTP/2 and native modules.\u003c/p\u003e\n\u003ca name='more'\u003e\u003c/a\u003e\n\u003ch3 id=\"why-we-bundle-modules\" class=\"countheads\"\u003eWhy we bundle modules\u003c/h3\u003e\u003cp\u003eBundling modules means combining several files with modules into a single file. That is done for three reasons:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eFewer files need to be retrieved in order to load all modules.\u003c/li\u003e\n\u003cli\u003eCompressing the bundled file is slightly more efficient than compressing separate files.\u003c/li\u003e\n\u003cli\u003eDuring bundling, unused exports can be removed, potentially resulting in significant space savings.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"javascript-modules\"\u003eJavaScript modules\u003c/h3\u003e\u003cp\u003eWith ECMAScript 6, JavaScript finally got built-in modules (I’m calling them \u003cem\u003eJavaScript modules\u003c/em\u003e for the remainder of this blog post). However, that feature is currently in a strange position:\u003c/p\u003e\n\u003cp\u003eOn one hand, ES6 fully standardized their syntax and much of their semantics. They have become a popular format for writing modules and their static structure enables the automatic omission of unused exports (also known as “tree-shaking” in the JavaScript world).\u003c/p\u003e\n\u003cp\u003eOn the other hand, standardizing how to load JavaScript modules is ongoing and no JavaScript engine supports them natively, yet. That means that, at the moment, the only way of using JavaScript modules is by compiling them to a non-native format. Popular solutions are: browserify, webpack, jspm and Rollup.\u003c/p\u003e\n\u003ch3 id=\"future-developments-and-bundling\"\u003eFuture developments and bundling\u003c/h3\u003e\u003cp\u003eLet’s look at two future developments and how they affect the bundling of JavaScript modules.\u003c/p\u003e\n\u003ch4 id=\"future-development-http%2F2\"\u003eFuture development: HTTP/2\u003c/h4\u003e\u003cp\u003eHTTP/2 is slowly being rolled out. It mainly affects reason #1 for bundling: With HTTP/2, the cost per request has decreased considerably compared to HTTP/1, which means that there are practically no performance gains if you download a single file instead of multiple ones. That enables smaller, more incremental updates: With bundling, you always need to download the complete bundle. Without bundling, you only need to download the parts that have changed (while the other parts are often still in the browser cache).\u003c/p\u003e\n\u003cp\u003eHowever, reasons #2 and #3 for bundling are not negated by HTTP/2. Therefore, mixed approaches may be adopted in the future, to optimize for both incremental updates and minimal total download size.\u003c/p\u003e\n\u003ch4 id=\"future-development-native-javascript-modules\"\u003eFuture development: native JavaScript modules\u003c/h4\u003e\u003cp\u003eOnce engines support native JavaScript modules, will that affect bundling? Even AMD modules – which run natively in browsers – have \u003ca href=\"http://requirejs.org/docs/optimization.html\"\u003ea custom bundle format\u003c/a\u003e (along with a minimal loader). Will native JS modules be different? It looks like they will. Rollup lets you bundle multiple JS modules into a single JS module.\u003c/p\u003e\n\u003cp\u003eTake, for example, these two JS modules:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    // lib.js\n    export function foo() {}\n    export function bar() {}\n    \n    // main.js\n    import {foo} from './lib.js';\n    console.log(foo());\n\u003c/pre\u003e\n\u003cp\u003eRollup can bundle these two JS modules into the following single JS module (note the eliminated unused export \u003ccode\u003ebar\u003c/code\u003e):\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    function foo() {}\n    \n    console.log(foo());\n\u003c/pre\u003e\n\u003cp\u003eInitially, it wasn’t a given that JavaScript modules would work as a bundle format – \u003ca href=\"https://github.com/rollup/rollup/issues/219#issuecomment-150842108\"\u003equoting Rollup’s creator Rich Harris\u003c/a\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhen I started writing Rollup, it was an experiment that I wasn\u0026#39;t certain would succeed.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe way imports are handled by JS modules helps with bundling: \u003ca href=\"http://exploringjs.com/es6/ch_modules.html#_imports-are-read-only-views-on-exports\"\u003ethey are not copies of exports, they are read-only views on them\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://rollupjs.org/\"\u003eRollup’s site\u003c/a\u003e has a nice interactive playground where you can try it out.\u003c/p\u003e\n\u003ch3 id=\"further-reading\"\u003eFurther reading\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e“\u003ca href=\"http://rmurphey.com/blog/2015/11/25/building-for-http2\"\u003eBuilding for HTTP/2\u003c/a\u003e” by Rebecca Murphey (explains how best practices change – often radically – with this new version of HTTP)\u003c/li\u003e\n\u003cli\u003eChap. “\u003ca href=\"http://exploringjs.com/es6/ch_modules.html\"\u003eModules\u003c/a\u003e” in “Exploring ES6” (explains how ES6 modules work)\u003c/li\u003e\n\u003cli\u003e“\u003ca href=\"http://www.2ality.com/2015/12/babel-commonjs.html\"\u003eBabel and CommonJS modules\u003c/a\u003e” (explains how Babel ensures that transpiled ES6 modules interoperate properly with CommonJS modules)\u003c/li\u003e\n\u003c/ul\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-8463019073847462182",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/8463019073847462182/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=8463019073847462182",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/8463019073847462182",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/8463019073847462182",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2015/12/bundling-modules-future.html",
						"-rel": "alternate",
						"-title": "The future of bundling JavaScript modules",
						"-type": "text/html"
					}
				],
				"published": "2015-12-27T23:13:00.002+01:00",
				"title": {
					"#text": "The future of bundling JavaScript modules",
					"-type": "text"
				},
				"total": 0,
				"updated": "2015-12-28T22:25:49.487+01:00"
			},
			{
				"author": {
					"email": "noreply@blogger.com",
					"image": {
						"-height": 32,
						"-rel": "http://schemas.google.com/g/2005#thumbnail",
						"-src": "//lh4.googleusercontent.com/-Co_34CwBCQU/AAAAAAAAAAI/AAAAAAAAAuM/VlxolpljJ4s/s32-c/photo.jpg",
						"-width": 32
					},
					"name": "Axel Rauschmayer",
					"uri": "https://plus.google.com/110516491705475800224"
				},
				"category": [
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "babel"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "dev"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "javascript"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "jsmodules"
					},
					{
						"-scheme": "http://www.blogger.com/atom/ns#",
						"-term": "webpack"
					}
				],
				"content": {
					"#text": "\u003cp\u003e\u003ca href=\"https://github.com/rollup/rollup\"\u003eRich Harris’ module bundler Rollup\u003c/a\u003e popularized an important feature in the JavaScript world: \u003cem\u003etree-shaking\u003c/em\u003e, excluding unused exports from bundles. Rollup depends on \u003ca href=\"http://exploringjs.com/es6/ch_modules.html#static-module-structure\"\u003ethe static structure of ES6 modules\u003c/a\u003e (imports and exports can’t be changed at runtime) to detect which exports are unused.\u003c/p\u003e\n\u003cp\u003eTree-shaking for webpack is currently in beta. This blog post explains how it works. The project we are going to examine is on GitHub: \u003ca href=\"https://github.com/rauschma/tree-shaking-demo\"\u003e\u003ccode\u003etree-shaking-demo\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ca name='more'\u003e\u003c/a\u003e\n\u003ch3 id=\"how_webpack_2_eliminates_unused_exports\" class=\"countheads\"\u003eHow webpack 2 eliminates unused exports\u003c/h3\u003e\u003cp\u003ewebpack 2, a new version that is in beta, eliminates unused exports in two steps:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eFirst, all ES6 module files are combined into a single bundle file. In that file, exports that were not imported anywhere are not exported, anymore.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eSecond, the bundle is minified, while eliminating dead code. Therefore, entities that are neither exported nor used inside their modules do not appear in the minified bundle. Without the first step, dead code elimination would never remove exports (registering an export keeps it alive).\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUnused exports can only be reliably detected at build time if the module system has a static structure. Therefore, webpack 2 can parse and understand all of ES6 and only tree-shakes if it detects an ES6 module. However, only imports and exports are transpiled to ES5. If you want all of the bundle to be in ES5, you need a transpiler for the remaining parts of ES6. In this blog post, we’ll use Babel 6.\u003c/p\u003e\n\u003ch3 id=\"input%3A_es6_code\"\u003eInput: ES6 code\u003c/h3\u003e\u003cp\u003eThe demo project has two ES6 modules.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ehelpers.js\u003c/code\u003e with helper functions:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    // helpers.js\n    export function foo() {\n        return 'foo';\n    }\n    export function bar() {\n        return 'bar';\n    }\n\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003emain.js\u003c/code\u003e, the entry point of the web application:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    // main.js\n    import {foo} from './helpers';\n    \n    let elem = document.getElementById('output');\n    elem.innerHTML = `Output: ${foo()}`;\n\u003c/pre\u003e\n\u003cp\u003eNote that the export \u003ccode\u003ebar\u003c/code\u003e of module \u003ccode\u003ehelpers\u003c/code\u003e is not used anywhere in this project.\u003c/p\u003e\n\u003ch3 id=\"output_without_tree-shaking\"\u003eOutput without tree-shaking\u003c/h3\u003e\u003cp\u003eThe canonical choice for Babel 6 is to use the preset \u003ccode\u003ees2015\u003c/code\u003e:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    {\n        presets: ['es2015'],\n    }\n\u003c/pre\u003e\n\u003cp\u003eHowever, \u003ca href=\"https://github.com/babel/babel/blob/472ad1e6a6d4d0dd199078fdb08c5bc16c75b5a9/packages/babel-preset-es2015/index.js\"\u003ethat preset\u003c/a\u003e includes the plugin \u003ccode\u003etransform-es2015-modules-commonjs\u003c/code\u003e, which means that Babel will output CommonJS modules and webpack won’t be able to tree-shake:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    function(module, exports) {\n    \n        'use strict';\n    \n        Object.defineProperty(exports, \"__esModule\", {\n            value: true\n        });\n        exports.foo = foo;\n        exports.bar = bar;\n        function foo() {\n            return 'foo';\n        }\n        function bar() {\n            return 'bar';\n        }\n    \n    }\n\u003c/pre\u003e\n\u003cp\u003eYou can see that \u003ccode\u003ebar\u003c/code\u003e is part of the exports, which prevents it being recognized as dead code by minification.\u003c/p\u003e\n\u003ch3 id=\"output_with_tree-shaking\"\u003eOutput with tree-shaking\u003c/h3\u003e\u003cp\u003eWhat we want is Babel’s \u003ccode\u003ees2015\u003c/code\u003e, but without the plugin \u003ccode\u003etransform-es2015-modules-commonjs\u003c/code\u003e. At the moment, the only way to get that is by mentioning all of the preset’s plugins in our configuration data, except for the one we want to exclude. \u003ca href=\"https://github.com/babel/babel/blob/472ad1e6a6d4d0dd199078fdb08c5bc16c75b5a9/packages/babel-preset-es2015/index.js\"\u003eThe preset’s source is on GitHub\u003c/a\u003e, so it’s basically a case of copying and pasting:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    {\n        plugins: [\n            'transform-es2015-template-literals',\n            'transform-es2015-literals',\n            'transform-es2015-function-name',\n            'transform-es2015-arrow-functions',\n            'transform-es2015-block-scoped-functions',\n            'transform-es2015-classes',\n            'transform-es2015-object-super',\n            'transform-es2015-shorthand-properties',\n            'transform-es2015-computed-properties',\n            'transform-es2015-for-of',\n            'transform-es2015-sticky-regex',\n            'transform-es2015-unicode-regex',\n            'check-es2015-constants',\n            'transform-es2015-spread',\n            'transform-es2015-parameters',\n            'transform-es2015-destructuring',\n            'transform-es2015-block-scoping',\n            'transform-es2015-typeof-symbol',\n            ['transform-regenerator', { async: false, asyncGenerators: false }],\n        ],\n    }\n\u003c/pre\u003e\n\u003cp\u003eIf we build the project now, module \u003ccode\u003ehelpers\u003c/code\u003e looks like this inside the bundle:\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    function(module, exports, __webpack_require__) {\n    \n        /* harmony export */ exports[\"foo\"] = foo;\n        /* unused harmony export bar */;\n    \n        function foo() {\n            return 'foo';\n        }\n        function bar() {\n            return 'bar';\n        }\n    }\n\u003c/pre\u003e\n\u003cp\u003eOnly \u003ccode\u003efoo\u003c/code\u003e is an export now, but \u003ccode\u003ebar\u003c/code\u003e is still there. After minification, \u003ccode\u003ehelpers\u003c/code\u003e looks like this (I’ve added line breaks and whitespace to make the code easier to read):\u003c/p\u003e\n\u003cpre class=\"javascript\"\u003e\n    function (t, n, r) {\n        function e() {\n            return \"foo\"\n        }\n    \n        n.foo = e\n    }\n\u003c/pre\u003e\n\u003cp\u003e\u003cem\u003eEt voilà\u003c/em\u003e – no more function \u003ccode\u003ebar\u003c/code\u003e!\u003c/p\u003e\n\u003ch3 id=\"further_reading\"\u003eFurther reading\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/webpack/webpack/tree/master/examples/harmony-unused\"\u003ewebpack example: \u003ccode\u003eharmony-unused\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.2ality.com/2015/11/configuring-babel6.html\"\u003eConfiguring Babel 6\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
					"-type": "html"
				},
				"id": "tag:blogger.com,1999:blog-8100407163665430627.post-7992560458246582212",
				"link": [
					{
						"-href": "http://www.2ality.com/feeds/7992560458246582212/comments/default",
						"-rel": "replies",
						"-title": "Post Comments",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/comment.g?blogID=8100407163665430627\u0026postID=7992560458246582212",
						"-rel": "replies",
						"-title": "0 Comments",
						"-type": "text/html"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/7992560458246582212",
						"-rel": "edit",
						"-type": "application/atom+xml"
					},
					{
						"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default/7992560458246582212",
						"-rel": "self",
						"-type": "application/atom+xml"
					},
					{
						"-href": "http://www.2ality.com/2015/12/webpack-tree-shaking.html",
						"-rel": "alternate",
						"-title": "Tree-shaking with webpack 2 and Babel 6",
						"-type": "text/html"
					}
				],
				"published": "2015-12-20T21:14:00.000+01:00",
				"title": {
					"#text": "Tree-shaking with webpack 2 and Babel 6",
					"-type": "text"
				},
				"total": 0,
				"updated": "2015-12-21T07:46:30.992+01:00"
			}
		],
		"generator": {
			"#text": "Blogger",
			"-uri": "https://www.blogger.com",
			"-version": 7
		},
		"id": "tag:blogger.com,1999:blog-8100407163665430627",
		"itemsPerPage": 25,
		"link": [
			{
				"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default",
				"-rel": "http://schemas.google.com/g/2005#feed",
				"-type": "application/atom+xml"
			},
			{
				"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default",
				"-rel": "self",
				"-type": "application/atom+xml"
			},
			{
				"-href": "http://www.2ality.com/",
				"-rel": "alternate",
				"-type": "text/html"
			},
			{
				"-href": "http://pubsubhubbub.appspot.com/",
				"-rel": "hub"
			},
			{
				"-href": "https://www.blogger.com/feeds/8100407163665430627/posts/default?start-index=26\u0026max-results=25",
				"-rel": "next",
				"-type": "application/atom+xml"
			}
		],
		"startIndex": 1,
		"subtitle": {
			"-type": "html"
		},
		"title": {
			"#text": "②ality – JavaScript and more",
			"-type": "text"
		},
		"totalResults": 1101,
		"updated": "2016-06-23T00:07:37.676+02:00"
	}
}